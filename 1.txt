<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>The Ultimate Coder</title>
    <!-- PWA Manifest -->
    <link rel="manifest" href="manifest.json">
    <!-- Favicon -->
    <link rel="icon" href="logo.png" type="image/x-icon">
    <!-- Tailwind CSS CDN for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Fonts - Inter for modern typography, Fira Code for monospace code -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Fira+Code:wght@300..700&display=swap" rel="stylesheet">
    <!-- Marked.js CDN for Markdown parsing -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <!-- Lucide Icons for a modern, futuristic feel -->
    <script src="https://cdn.jsdelivr.net/npm/lucide-dynamic@latest/dist/lucide.min.js"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <!-- Prism.js for syntax highlighting -->
    <!-- Dynamically load dark or light Prism theme based on app theme -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-dark.min.css" rel="stylesheet" id="prism-dark-theme" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css" rel="stylesheet" id="prism-light-theme" disabled />
    <!-- Include common languages (adjust as needed) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-clike.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-javascript.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-css.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-html.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-java.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-json.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-bash.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-markup.min.js"></script>


    <style>
        /* Ensure consistent box-sizing across all elements */
        *, *::before, *::after {
            box-sizing: border-box;
        }

        /*
         * --- Custom Styles for The Ultimate Coder AI Chat Assistant ---
         * This section defines a developer-centric theme with a dark background,
         * vibrant accent colors, and sleek UI elements.
         */
        
        /* Base font and transition settings for the whole page */
        html, body {
            height: 100%;
            width: 100vw; /* Ensure body takes full viewport width */
            margin: 0;
            padding: 0;
            overflow-y: hidden; /* Only vertical overflow for body */
            overflow-x: hidden; /* Added to explicitly prevent horizontal scrolling */
            font-family: 'Inter', sans-serif;
            transition: background-color 0.6s ease, color 0.6s ease;
            display: flex;
            color: var(--text-primary);
        }

        /* --- Theme Definitions --- */

        /* Coder's Dark Theme (Default) */
        body[data-theme="coder-dark"] {
            --bg-primary: #0A0A0F; /* Very dark background */
            --bg-secondary: #1E1E28; /* Slightly lighter for secondary elements */
            --text-primary: #00BCD4; /* Light text */
            --text-secondary: #8B949E; /* Muted gray text */
            --border-color: #30363D; /* Darker border */
            --card-bg: #1E1E28; /* Card backgrounds */
            --card-border: #30363D;
            --header-bg: #12121A; /* Header background */
            --accent-primary: #00BCD4; /* Cyan/Teal for primary actions */
            --accent-primary-hover: #0097A7;
            --accent-secondary: #8A2BE2; /* BlueViolet for secondary accents */
            --accent-error: #EF4444; /* Standard red */
            --accent-success: #22C55E; /* Standard green */
            --user-bubble-bg: #2C3E50; /* Dark blue-gray for user */
            --user-bubble-text: #E0E0E0;
            --ai-bubble-bg: #1A1A24; /* Even darker for AI */
            --ai-bubble-text: #E0E0E0;
            --sidebar-bg: #0A0A0F; /* Sidebar matches primary bg */
            --sidebar-border: #30363D;
            --sidebar-item-hover: #1E1E28;
            --loader-dot-color: var(--accent-primary);
            --code-block-bg: #1A1A1D; /* Specific dark for code blocks */
            --code-block-header-bg: #27272A;
            --code-block-border: #3F3F46;

            background-image: radial-gradient(at 0% 0%, hsl(240, 60%, 8%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(260, 50%, 8%) 0%, transparent 50%);
            background-size: cover;
            background-attachment: fixed;
        }

        /* Coder's Light Theme */
        body[data-theme="coder-light"] {
            --bg-primary: #F0F2F5; /* Light gray background */
            --bg-secondary: #FFFFFF; /* White for secondary elements */
            --text-primary: #008C9D; /* Dark text */
            --text-secondary: #718096; /* Muted gray text */
            --border-color: #DDE2E8; /* Light border */
            --card-bg: #FFFFFF; /* Card backgrounds */
            --card-border: #DDE2E8;
            --header-bg: #E8EDF2; /* Header background */
            --accent-primary: #008C9D; /* Darker Cyan/Teal for primary actions */
            --accent-primary-hover: #006D7D;
            --accent-secondary: #6A1B9A; /* Darker BlueViolet for secondary accents */
            --accent-error: #D32F2F; /* Standard red */
            --accent-success: #388E3C; /* Standard green */
            --user-bubble-bg: #E0F7FA; /* Light blue-gray for user */
            --user-bubble-text: #004D40;
            --ai-bubble-bg: #F0F4F8; /* Even lighter for AI */
            --ai-bubble-text: #2C2C30;
            --sidebar-bg: #FFFFFF; /* Sidebar matches secondary bg */
            --sidebar-border: #DDE2E8;
            --sidebar-item-hover: #F0F2F5;
            --loader-dot-color: var(--accent-primary);
            --code-block-bg: #F5F5F5; /* Specific light for code blocks */
            --code-block-header-bg: #ECEFF1;
            --code-block-border: #CFD8DC;

            background-image: radial-gradient(at 0% 0%, hsl(210, 30%, 95%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(200, 20%, 90%) 0%, transparent 50%);
            background-size: cover;
            background-attachment: fixed;
        }

        /* --- NEW THEMES START HERE --- */

        /* Cyberpunk Neon Theme (Dark) */
        body[data-theme="cyberpunk-dark"] {
            --bg-primary: #120A1A; /* Deep dark purple */
            --bg-secondary: #2C1A3A;
            --text-primary: #00FFFF;
            --text-secondary: #A08AB2;
            --border-color: #4C2B60;
            --card-bg: #2C1A3A;
            --card-border: #4C2B60;
            --header-bg: #1A0F24;
            --accent-primary: #00FFFF; /* Electric Cyan */
            --accent-primary-hover: #00CED1;
            --accent-secondary: #FF1493; /* Deep Pink */
            --accent-error: #FF4500; /* Orange Red */
            --accent-success: #32CD32; /* Lime Green */
            --user-bubble-bg: #3A204D;
            --user-bubble-text: #E0E0E0;
            --ai-bubble-bg: #22152F;
            --ai-bubble-text: #E0E0E0;
            --sidebar-bg: #120A1A;
            --sidebar-border: #4C2B60;
            --sidebar-item-hover: #2C1A3A;
            --loader-dot-color: var(--accent-primary);
            --code-block-bg: #1A1022;
            --code-block-header-bg: #271C35;
            --code-block-border: #3A2548;

            background-image: radial-gradient(at 0% 0%, hsl(280, 50%, 8%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(320, 50%, 8%) 0%, transparent 50%);
            background-size: cover;
            background-attachment: fixed;
        }

        /* Matrix Code Theme (Dark) */
        body[data-theme="matrix-dark"] {
            --bg-primary: #000000; /* Pure black */
            --bg-secondary: #0A0A0A;
            --text-primary: #00FF00; /* Neon Green */
            --text-secondary: #008000; /* Darker Green */
            --border-color: #004000;
            --card-bg: #0A0A0A;
            --card-border: #004000;
            --header-bg: #000000;
            --accent-primary: #00FF00;
            --accent-primary-hover: #00CC00;
            --accent-secondary: #00FFFF; /* Cyan */
            --accent-error: #FF0000; /* Red */
            --accent-success: #00FF00; /* Green */
            --user-bubble-bg: #001A00;
            --user-bubble-text: #00FF00;
            --ai-bubble-bg: #000500;
            --ai-bubble-text: #00FF00;
            --sidebar-bg: #000000;
            --sidebar-border: #004000;
            --sidebar-item-hover: #001500;
            --loader-dot-color: var(--accent-primary);
            --code-block-bg: #000A00;
            --code-block-header-bg: #001000;
            --code-block-border: #002000;

            background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" viewBox="0 0 100 100"><defs><pattern id="matrix-pattern" x="0" y="0" width="10" height="10" patternUnits="userSpaceOnUse"><text x="1" y="8" fill="%23004000" font-family="monospace" font-size="9">10</text></pattern></defs><rect x="0" y="0" width="100%" height="100%" fill="url(%23matrix-pattern)"/></svg>');
            background-size: cover;
            background-attachment: fixed;
            background-position: center;
        }

        /* Solarized Light Theme */
        body[data-theme="solarized-light"] {
            --bg-primary: #FDF6E3; /* Base3 */
            --bg-secondary: #EEE8D5; /* Base2 */
            --text-primary: #2AA198; /* Base01 */
            --text-secondary: #657B83; /* Base00 */
            --border-color: #93A1A1; /* Base0 */
            --card-bg: #EEE8D5;
            --card-border: #93A1A1;
            --header-bg: #FDF6E3;
            --accent-primary: #2AA198; /* Cyan */
            --accent-primary-hover: #268BD2; /* Blue */
            --accent-secondary: #DC322F; /* Red */
            --accent-error: #DC322F;
            --accent-success: #859900; /* Green */
            --user-bubble-bg: #839496; /* Base0 */
            --user-bubble-text: #FDF6E3;
            --ai-bubble-bg: #E0E0D0; /* Slightly darker than bg_secondary */
            --ai-bubble-text: #586E75;
            --sidebar-bg: #FDF6E3;
            --sidebar-border: #93A1A1;
            --sidebar-item-hover: #EEE8D5;
            --loader-dot-color: var(--accent-primary);
            --code-block-bg: #EEE8D5;
            --code-block-header-bg: #FDF6E3;
            --code-block-border: #D0D0C0;

            background-image: radial-gradient(at 0% 0%, hsl(45, 60%, 96%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(40, 50%, 95%) 0%, transparent 50%);
            background-size: cover;
            background-attachment: fixed;
        }

        /* Dracula Theme (Dark) */
        body[data-theme="dracula-dark"] {
            --bg-primary: #282A36; /* Background */
            --bg-secondary: #343746; /* Current Line/Selection */
            --text-primary: #BD93F9; /* Foreground */
            --text-secondary: #6272A4; /* Comment */
            --border-color: #44475A; /* Selection Background */
            --card-bg: #343746;
            --card-border: #44475A;
            --header-bg: #21222C; /* Darker Background */
            --accent-primary: #BD93F9; /* Purple */
            --accent-primary-hover: #FF79C6; /* Pink */
            --accent-secondary: #50FA7B; /* Green */
            --accent-error: #FF5555; /* Red */
            --accent-success: #50FA7B;
            --user-bubble-bg: #44475A;
            --user-bubble-text: #F8F8F2;
            --ai-bubble-bg: #2F313E;
            --ai-bubble-text: #F8F8F2;
            --sidebar-bg: #282A36;
            --sidebar-border: #44475A;
            --sidebar-item-hover: #343746;
            --loader-dot-color: var(--accent-primary);
            --code-block-bg: #21222C;
            --code-block-header-bg: #2F313E;
            --code-block-border: #44475A;

            background-image: radial-gradient(at 0% 0%, hsl(260, 20%, 15%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(300, 20%, 15%) 0%, transparent 50%);
            background-size: cover;
            background-attachment: fixed;
        }

        /* Monokai Pro Theme (Dark) */
        body[data-theme="monokai-dark"] {
            --bg-primary: #2D2A2E; /* Background */
            --bg-secondary: #3B3A3E; /* Slightly lighter background */
            --text-primary: #A6E22E; /* Foreground */
            --text-secondary: #75715E; /* Comment */
            --border-color: #49483E;
            --card-bg: #3B3A3E;
            --card-border: #49483E;
            --header-bg: #232124; /* Darker background */
            --accent-primary: #A6E22E; /* Green */
            --accent-primary-hover: #E6DB74; /* Yellow */
            --accent-secondary: #FD971F; /* Orange */
            --accent-error: #F92672; /* Pink */
            --accent-success: #A6E22E;
            --user-bubble-bg: #49483E;
            --user-bubble-text: #FCFCFA;
            --ai-bubble-bg: #363438;
            --ai-bubble-text: #FCFCFA;
            --sidebar-bg: #2D2A2E;
            --sidebar-border: #49483E;
            --sidebar-item-hover: #3B3A3E;
            --loader-dot-color: var(--accent-primary);
            --code-block-bg: #232124;
            --code-block-header-bg: #363438;
            --code-block-border: #49483E;

            background-image: radial-gradient(at 0% 0%, hsl(300, 10%, 15%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(280, 10%, 15%) 0%, transparent 50%);
            background-size: cover;
            background-attachment: fixed;
        }


        /* Nord Theme (Dark) */
        body[data-theme="nord-dark"] {
            --bg-primary: #2E3440; /* Nord0 */
            --bg-secondary: #3B4252; /* Nord1 */
            --text-primary: #88C0D0; /* Nord4 */
            --text-secondary: #ECEFF4; /* Nord6 */
            --border-color: #4C566A; /* Nord3 */
            --card-bg: #3B4252;
            --card-border: #4C566A;
            --header-bg: #242933; /* Darker than Nord0 */
            --accent-primary: #88C0D0; /* Nord8 (Cyan) */
            --accent-primary-hover: #81A1C1; /* Nord7 (Blue) */
            --accent-secondary: #B48EAD; /* Nord10 (Purple) */
            --accent-error: #BF616A; /* Nord11 (Red) */
            --accent-success: #A3BE8C; /* Nord14 (Green) */
            --user-bubble-bg: #4C566A;
            --user-bubble-text: #D8DEE9;
            --ai-bubble-bg: #343A48;
            --ai-bubble-text: #D8DEE9;
            --sidebar-bg: #2E3440;
            --sidebar-border: #4C566A;
            --sidebar-item-hover: #3B4252;
            --loader-dot-color: var(--accent-primary);
            --code-block-bg: #242933;
            --code-block-header-bg: #343A48;
            --code-block-border: #4C566A;

            background-image: radial-gradient(at 0% 0%, hsl(220, 15%, 15%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(230, 15%, 15%) 0%, transparent 50%);
            background-size: cover;
            background-attachment: fixed;
        }


        /* Gruvbox Dark Theme */
        body[data-theme="gruvbox-dark"] {
            --bg-primary: #282828; /* bg0_h */
            --bg-secondary: #3C3836; /* bg0 */
            --text-primary: #83A598; /* fg */
            --text-secondary: #A89984; /* grey */
            --border-color: #504945; /* bg1 */
            --card-bg: #3C3836;
            --card-border: #504945;
            --header-bg: #1D2021; /* Darker */
            --accent-primary: #83A598; /* aqua */
            --accent-primary-hover: #B8BB26; /* green */
            --accent-secondary: #FABD2F; /* yellow */
            --accent-error: #FB4934; /* red */
            --accent-success: #B8BB26;
            --user-bubble-bg: #504945;
            --user-bubble-text: #EBDBB2;
            --ai-bubble-bg: #32302F;
            --ai-bubble-text: #EBDBB2;
            --sidebar-bg: #282828;
            --sidebar-border: #504945;
            --sidebar-item-hover: #3C3836;
            --loader-dot-color: var(--accent-primary);
            --code-block-bg: #1D2021;
            --code-block-header-bg: #32302F;
            --code-block-border: #504945;

            background-image: radial-gradient(at 0% 0%, hsl(30, 5%, 15%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(20, 5%, 15%) 0%, transparent 50%);
            background-size: cover;
            background-attachment: fixed;
        }

        /* Catppuccin Macchiato Theme (Dark, but lighter) */
        body[data-theme="catppuccin-dark"] {
            --bg-primary: #24273A; /* Base */
            --bg-secondary: #363A4F; /* Mantle */
            --text-primary: #8BD5CA; /* Text */
            --text-secondary: #A5ADCE; /* Subtext0 */
            --border-color: #494D64; /* Surface1 */
            --card-bg: #363A4F;
            --card-border: #494D64;
            --header-bg: #1E2030; /* Crust */
            --accent-primary: #8BD5CA; /* Teal */
            --accent-primary-hover: #B7BFEF; /* Lavender */
            --accent-secondary: #F4B8E4; /* Pink */
            --accent-error: #ED8796; /* Red */
            --accent-success: #A6DA95; /* Green */
            --user-bubble-bg: #494D64;
            --user-bubble-text: #CAD3F5;
            --ai-bubble-bg: #2E3243;
            --ai-bubble-text: #CAD3F5;
            --sidebar-bg: #24273A;
            --sidebar-border: #494D64;
            --sidebar-item-hover: #363A4F;
            --loader-dot-color: var(--accent-primary);
            --code-block-bg: #1E2030;
            --code-block-header-bg: #2E3243;
            --code-block-border: #494D64;

            background-image: radial-gradient(at 0% 0%, hsl(230, 15%, 15%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(250, 15%, 15%) 0%, transparent 50%);
            background-size: cover;
            background-attachment: fixed;
        }

        /* --- NEW THEMES END HERE --- */

        /* --- Global Styles & Overrides --- */

        /* Apply theme colors */
        body {
            background-color: var(--bg-primary);
            color: var(--text-primary);
        }

        /* Tailwind overrides for consistency with theme variables */
        .bg-white { background-color: var(--card-bg); }
        .bg-gray-50 { background-color: var(--header-bg); }
        .border-gray-100 { border-color: var(--card-border); }
        .border-gray-200 { border-color: var(--card-border); }
        .text-gray-800 { color: var(--text-primary); }
        .text-gray-900 { color: var(--text-primary); }
        .text-gray-600 { color: var(--text-secondary); }
        .text-gray-700 { color: var(--text-secondary); }
        .bg-gray-200 { background-color: var(--bg-primary); color: var(--text-primary); }
        .hover\:bg-gray-300:hover { background-color: var(--sidebar-item-hover); }
        .bg-gray-100 { background-color: var(--bg-primary); }
        .shadow-2xl { box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25); }
        body[data-theme$="-dark"] .shadow-2xl { box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.45); }
        #error-message { background-color: var(--accent-error); color: white; }
        body[data-theme$="-dark"] #error-message { background-color: var(--accent-error); color: white; }

        /* Custom styles for glowing effects on buttons */
        .glow-button {
            position: relative;
            z-index: 10;
            transition: all 0.4s ease;
            box-shadow: 0 0 10px var(--accent-primary);
            background-color: var(--accent-primary);
        }
        .glow-button:hover {
            box-shadow: 0 0 15px var(--accent-primary), 0 0 25px var(--accent-primary), 0 0 35px var(--accent-primary);
            transform: translateY(-2px) scale(1.02);
            background-image: linear-gradient(to right, var(--accent-primary), var(--accent-primary-hover));
        }
        
        /* Markdown content styling for better readability */
        .markdown-content h1, .markdown-content h2, .markdown-content h3 { font-weight: 800; margin-bottom: 0.75em; margin-top: 1.5em; line-height: 1.2; color: var(--accent-primary); }
        .markdown-content h1 { font-size: 2.25rem; }
        .markdown-content h2 { font-size: 1.875rem; }
        .markdown-content h3 { font-size: 1.5rem; }
        .markdown-content ul, .markdown-content ol { list-style-position: inside; margin-left: 1.5em; margin-bottom: 1em; }
        .markdown-content li { margin-bottom: 0.5em; }
        .markdown-content strong { color: var(--accent-secondary); font-weight: 700; }
        .markdown-content p { margin-bottom: 1em; }
        .markdown-content p:last-child { margin-bottom: 0; }

        /* Custom styles for dark mode toggle switch */
        .switch { margin-left: 0.5rem; }
        .slider { background-color: var(--text-secondary); transition: .4s; }
        input:checked + .slider { background-color: var(--accent-primary); }
        input:checked + .slider:before { transform: translateX(24px); }
        .slider:before { background-color: var(--bg-secondary); transition: .4s; }

        /* Custom scrollbar for a sleek look (hidden) */
        #sidebar-chat-list::-webkit-scrollbar,
        #chat-input::-webkit-scrollbar {
            width: 0 !important;
            height: 0 !important;
        }
        #sidebar-chat-list,
        #chat-input {
            -ms-overflow-style: none; /* Internet Explorer and Edge */
            scrollbar-width: none; /* Firefox */
        }

        /* Styles specifically for #chat-history scrollbar */
        #chat-history {
            overflow-y: auto;
            overflow-x: hidden;

            scrollbar-width: thin;
            scrollbar-color: var(--accent-primary) var(--sidebar-item-hover);
        }

        #chat-history::-webkit-scrollbar {
            width: 8px;
        }

        #chat-history::-webkit-scrollbar-track {
            background: var(--sidebar-item-hover);
            border-radius: 10px;
        }

        #chat-history::-webkit-scrollbar-thumb {
            background-color: var(--accent-primary);
            border-radius: 10px;
            border: 2px solid var(--sidebar-item-hover);
        }

        #chat-history::-webkit-scrollbar-thumb:hover {
            background-color: var(--accent-primary-hover);
        }
        
        /* Modern loading animation */
        .loader-container { display: flex; justify-content: center; align-items: center; width: 100%; height: 100%; }
        .loader-dot {
            width: 12px; height: 12px; margin: 0 4px;
            background-color: var(--loader-dot-color);
            border-radius: 50%; display: inline-block;
            animation: bounce 1.4s infinite ease-in-out both;
        }
        .loader-dot:nth-child(1) { animation-delay: -0.32s; }
        .loader-dot:nth-child(2) { animation-delay: -0.16s; }
        .loader-dot:nth-child(3) { animation-delay: 0s; }
        
        @keyframes bounce {
            0%, 80%, 100% { transform: scale(0); opacity: 0.5; }
            40% { transform: scale(1.0); opacity: 1; }
        }

        /* Main Chat Window Styling */
        #main-chat-window {
            flex: 1;
            width: 100%; /* Explicitly ensure it takes full available width in flex context */
            min-height: 100vh;
            height: 100vh;
            display: flex;
            flex-direction: column;
            background-color: var(--bg-primary);
            border-radius: 0;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
            border-left: 1px solid var(--border-color);
            transition: all 0.3s ease-in-out;
        }
        body[data-theme$="-dark"] #main-chat-window {
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.45);
        }

        /* Sidebar Styling */
        #sidebar {
            width: 280px;
            min-width: 280px;
            background-color: var(--sidebar-bg);
            border-right: 1px solid var(--sidebar-border);
            display: flex;
            flex-direction: column;
            padding: 1rem;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
            position: relative;
            z-index: 30;
            height: 100vh;
            overflow-y: auto;
            transition: transform 0.3s ease-out, box-shadow 0.3s ease-out;
            flex-shrink: 0; /* Prevents sidebar from shrinking */
        }
        #sidebar.hidden-mobile {
            transform: translateX(-100%);
            position: absolute;
            left: 0;
            box-shadow: none;
        }
        @media (min-width: 768px) { /* md breakpoint */
            body {
                justify-content: flex-start;
                align-items: stretch;
            }
            #sidebar {
                position: relative;
                transform: translateX(0%);
                border-radius: 0;
            }
            #sidebar.hidden-mobile {
                transform: translateX(0%);
                position: relative;
            }
            #main-chat-window {
                max-width: none;
                border-radius: 0;
            }
            #hamburger-menu-button { display: none !important; }
        }
        
        /* New chat message styles */
        .chat-message {
            margin-bottom: 0.75rem; padding: 1rem; border-radius: 1.5rem;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            word-break: break-word; transition: all 0.3s ease; transform: scale(0.95);
            transform-origin: bottom; max-width: 85%; position: relative; padding-bottom: 2.5rem;
        }

        .chat-message.user {
            background-color: var(--user-bubble-bg); color: var(--user-bubble-text);
            margin-left: auto; border-bottom-right-radius: 0.5rem;
            border: 1px solid color-mix(in srgb, var(--accent-primary) 30%, transparent);
        }

        .chat-message.ai {
            background-color: var(--ai-bubble-bg); color: var(--ai-bubble-text);
            margin-right: auto; border-bottom-left-radius: 0.5rem;
            border: 1px solid color-mix(in srgb, var(--accent-secondary) 30%, transparent);
        }

        /* Styling for chat attachments */
        .chat-image { max-width: 100%; height: auto; border-radius: 0.75rem; margin-top: 0.5rem; display: block; }
        .chat-attachment-preview-item {
            display: flex; align-items: center; gap: 0.5rem; padding: 0.5rem 0.75rem;
            border-radius: 1rem; background-color: color-mix(in srgb, var(--accent-primary) 15%, transparent);
            color: var(--accent-primary); font-size: 0.875rem; box-shadow: 0 1px 2px rgba(0,0,0,0.08);
            transition: all 0.2s ease;
        }
        .chat-attachment-preview-item .remove-attachment-btn {
            background: none; border: none; color: var(--accent-primary); cursor: pointer;
            padding: 0.1rem; border-radius: 50%; transition: background-color 0.2s ease;
        }
        .chat-attachment-preview-item .remove-attachment-btn:hover {
            background-color: color-mix(in srgb, var(--accent-primary) 20%, transparent);
        }

        /* Styling for the copy message */
        #copy-message {
            position: fixed; bottom: 2rem; left: 50%; transform: translateX(-50%);
            padding: 0.75rem 1.5rem; background-color: var(--accent-success); color: white;
            border-radius: 9999px; box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            opacity: 0; visibility: hidden; transition: all 0.5s ease-in-out; z-index: 100;
        }
        #copy-message.show { opacity: 1; visibility: visible; bottom: 4rem; }

        /* --- New/Enhanced Styles for Chat AI Responses & Code Blocks --- */
        
        .chat-message .message-content { padding: 0; margin: 0; }
        .chat-message.ai .message-content p, .chat-message.ai .message-content ul,
        .chat-message.ai .message-content ol, .chat-message.ai .message-content h1,
        .chat-message.ai .message-content h2, .chat-message.ai .message-content h3,
        .chat-message.ai .message-content blockquote { margin-bottom: 1em; }
        .chat-message.ai .message-content p:last-child, .chat-message.ai .message-content ul:last-child,
        .chat-message.ai .message-content ol:last-child, .chat-message.ai .message-content blockquote:last-child { margin-bottom: 0; }
        .chat-message.ai .message-content ul, .chat-message.ai .message-content ol { padding-left: 1.5em; }
        .chat-message.ai .message-content li { margin-bottom: 0.5em; }
        .chat-message.ai .message-content strong { font-weight: bold; color: var(--accent-primary); }
        .chat-message.ai .message-content em { font-style: italic; }
        .chat-message.ai .message-content blockquote {
            border-left: 4px solid var(--accent-secondary); padding-left: 1em;
            margin-left: 0; color: var(--text-secondary);
        }

        /* Code block specific styling */
        .code-block-container {
            position: relative;
            background-color: var(--code-block-bg); /* Themed */
            color: var(--text-primary);
            border-radius: 0.75rem; margin-top: 1rem; margin-bottom: 1rem;
            overflow: hidden; border: 1px solid var(--code-block-border); /* Themed */
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        }
        .code-block-container pre {
            margin: 0; padding: 1rem; overflow-x: auto;
            font-family: 'Fira Code', 'Cascadia Code', 'Consolas', monospace; /* Monospace for code */
            font-size: 0.9em; line-height: 1.4;
        }
        /* Override Prism.js default styles for code blocks */
        .code-block-container pre[class*="language-"] {
            background-color: var(--code-block-bg) !important; /* Force background from theme variable */
            padding: 1rem !important; /* Re-apply padding if Prism removes it */
            margin: 0 !important; /* Re-apply margin if Prism adds it */
        }

        .code-block-container pre code[class*="language-"] {
            color: var(--text-primary) !important; /* Set default code text color */
        }

        .code-block-header {
            display: flex; justify-content: space-between; align-items: center;
            background-color: var(--code-block-header-bg); /* Themed */
            color: var(--text-secondary); padding: 0.5rem 1rem;
            border-bottom: 1px solid var(--code-block-border); /* Themed */
            font-size: 0.85em;
            border-top-left-radius: 0.75rem; border-top-right-radius: 0.75rem;
        }
        .code-block-copy-button {
            background-color: transparent; border: none; color: var(--text-secondary);
            cursor: pointer; padding: 0.25rem 0.5rem; border-radius: 0.375rem;
            transition: background-color 0.2s ease, color 0.2s ease;
            display: flex; align-items: center; gap: 0.25rem; font-size: 0.85em;
        }
        .code-block-copy-button:hover { background-color: var(--border-color); color: var(--text-primary); }
        .code-block-copy-button:active { transform: scale(0.95); }

        /* Smallest font size for inline code blocks if any */
        .chat-message.ai .message-content code:not(pre > code) {
            background-color: color-mix(in srgb, var(--accent-primary) 15%, transparent) !important;
            border-radius: 0.25rem;
            padding: 0.2em 0.4em; font-family: 'Fira Code', 'Cascadia Code', 'Consolas', monospace;
            font-size: 0.9em; color: var(--accent-primary) !important;
        }

        /* Ensure links are distinguishable */
        .chat-message.ai .message-content a {
            color: var(--accent-primary); text-decoration: underline; transition: color 0.2s ease;
        }
        .chat-message.ai .message-content a:hover { color: var(--accent-primary-hover); }

        /* Styles for message action buttons (copy/dictate) */
        .message-actions {
            position: absolute; bottom: 0.5rem; right: 1rem; display: flex; gap: 0.5rem;
            padding: 0.25rem 0.5rem; background-color: var(--header-bg);
            border-radius: 0.75rem; backdrop-filter: blur(5px); transition: opacity 0.3s ease;
            opacity: 0; z-index: 10;
            border: 1px solid var(--border-color);
        }
        .chat-message:hover .message-actions { opacity: 1; }
        .message-actions button {
            background: none; border: none; cursor: pointer; padding: 0.25rem;
            border-radius: 0.375rem; transition: background-color 0.2s ease, color 0.2s ease;
            display: flex; align-items: center; justify-content: center;
        }
        .message-actions button .lucide { color: var(--text-secondary); width: 1rem; height: 1rem; }
        .message-actions button:hover .lucide { color: var(--text-primary); }
        .message-actions button:hover { background-color: var(--sidebar-item-hover); }
        .chat-message.user .message-actions { right: 1rem; left: auto; }
        .chat-message.ai .message-actions { left: 1rem; right: auto; }

        /* New style for speech recognition button when active */
        .voice-input-active {
            background-color: var(--accent-error) !important;
            animation: pulse-red 1s infinite cubic-bezier(0.4, 0, 0.6, 1);
        }
        @keyframes pulse-red {
            0%, 100% { box-shadow: 0 0 0 0 color-mix(in srgb, var(--accent-error) 70%, transparent); }
            50% { box-shadow: 0 0 0 10px color-mix(in srgb, var(--accent-error) 0%, transparent); }
        }
        
        /* Drag and Drop visual feedback for chat input area */
        #chat-input-area-container.drag-over-active {
            border: 2px dashed var(--accent-primary);
            box-shadow: 0 0 20px var(--accent-primary), 0 0 30px var(--accent-primary) inset;
        }
        
        /* Sidebar chat list item styling */
        .sidebar-chat-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0.75rem 1rem;
            border-radius: 0.75rem;
            cursor: pointer;
            transition: background-color 0.2s ease, color 0.2s ease;
            color: var(--text-secondary);
            margin-bottom: 0.5rem;
            text-align: left;
        }
        .sidebar-chat-item:hover {
            background-color: var(--sidebar-item-hover);
            color: var(--text-primary);
        }
        .sidebar-chat-item.active {
            background-color: var(--accent-primary);
            color: black;
            font-weight: 600;
        }
        .sidebar-chat-item.active .lucide {
            color: black;
        }
        .sidebar-chat-item.active:hover {
            background-color: var(--accent-primary-hover);
        }
        .sidebar-chat-item-content {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            flex-grow: 1;
            min-width: 0;
        }
        .sidebar-chat-item-title {
            flex-grow: 1;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            min-width: 0;
        }
        .sidebar-chat-item-actions {
            display: flex;
            gap: 0.25rem;
            flex-shrink: 0;
            opacity: 0;
            transition: opacity 0.2s ease;
        }
        .sidebar-chat-item:hover .sidebar-chat-item-actions {
            opacity: 1;
        }
        .sidebar-chat-item-actions button {
            background: none;
            border: none;
            padding: 0.25rem;
            border-radius: 0.375rem;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }
        .sidebar-chat-item-actions button .lucide {
            width: 1rem;
            height: 1rem;
            color: var(--text-secondary);
        }
        .sidebar-chat-item-actions button:hover {
            background-color: var(--sidebar-item-hover);
        }
        .sidebar-chat-item.active .sidebar-chat-item-actions button .lucide {
            color: white;
        }

        /* Responsive menu button for sidebar */
        #hamburger-menu-button {
            display: flex;
            margin-right: 1rem;
            align-items: center;
            justify-content: center;
            width: 2.5rem;
            height: 2.5rem;
            border-radius: 0.5rem;
            background-color: var(--header-bg);
            border: 1px solid var(--border-color);
            color: var(--text-primary);
            cursor: pointer;
            transition: background-color 0.2s;
        }
        #hamburger-menu-button:hover {
            background-color: var(--sidebar-item-hover);
        }

        /* Overlay for mobile sidebar */
        .sidebar-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0,0,0,0.5);
            z-index: 29;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease-out, visibility 0.3s ease-out;
        }
        .sidebar-overlay.active {
            opacity: 1;
            visibility: visible;
        }
        
        /* Styling for the prompt templates list */
        .template-item {
            display: flex;
            flex-direction: column;
            padding: 0.75rem 1rem;
            border-radius: 0.75rem;
            background-color: var(--bg-secondary);
            border: 1px solid var(--border-color);
            margin-bottom: 0.5rem;
            transition: background-color 0.2s ease, border-color 0.2s ease;
        }
        .template-item:hover {
            background-color: var(--sidebar-item-hover);
            border-color: var(--accent-primary);
        }
        .template-item-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
        }
        .template-item-name {
            font-weight: 600;
            color: var(--text-primary);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            flex-grow: 1;
        }
        .template-item-content {
            font-size: 0.875rem;
            color: var(--text-secondary);
            max-height: 3em; /* Limit content preview */
            overflow: hidden;
            text-overflow: ellipsis;
            line-height: 1.5;
            margin-bottom: 0.75rem;
        }
        .template-item-actions {
            display: flex;
            gap: 0.5rem;
            justify-content: flex-end;
            margin-top: 0.5rem;
        }
        .template-item-actions button {
            padding: 0.4rem 0.8rem;
            border-radius: 0.5rem;
            font-size: 0.8rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }
        .template-item-actions .use-btn {
            background-color: var(--accent-primary);
            color: black;
        }
        .template-item-actions .use-btn:hover {
            background-color: var(--accent-primary-hover);
            box-shadow: 0 0 10px var(--accent-primary);
            transform: translateY(-1px);
        }
        .template-item-actions .edit-btn {
            background-color: var(--bg-primary);
            color: var(--text-primary);
            border: 1px solid var(--border-color);
        }
        .template-item-actions .edit-btn:hover {
            background-color: var(--sidebar-item-hover);
            border-color: var(--accent-secondary);
            transform: translateY(-1px);
        }
        .template-item-actions .delete-btn {
            background-color: var(--accent-error);
            color: white;
        }
        .template-item-actions .delete-btn:hover {
            background-color: color-mix(in srgb, var(--accent-error) 80%, black 20%);
            box-shadow: 0 0 8px var(--accent-error);
            transform: translateY(-1px);
        }

    </style>
</head>
<body class="antialiased" data-theme="coder-dark">

    <!-- Overlay for mobile sidebar -->
    <div class="sidebar-overlay" id="sidebar-overlay"></div>

    <!-- Sidebar -->
    <aside id="sidebar" class="hidden-mobile">
        <div class="flex items-center justify-between pb-4 border-b border-[var(--sidebar-border)] mb-4">
            <h2 class="text-xl font-bold flex items-center gap-2" style="color: var(--text-primary);">
                <span data-lucide="code-square" class="w-6 h-6" style="color: var(--accent-primary);"></span> The Ultimate Coder
            </h2>
            <button id="close-sidebar-btn" aria-label="Close Sidebar" title="Close Sidebar" class="md:hidden" style="color: var(--text-secondary); background-color: transparent; border: none;">
                <span data-lucide="x" class="w-6 h-6"></span>
            </button>
        </div>

        <!-- New Chat Button -->
        <button id="new-chat-button" class="w-full flex items-center justify-center p-3 rounded-xl font-semibold shadow-lg transition-colors mb-4 glow-button" style="background-color: var(--accent-primary); color: black;">
            <span data-lucide="plus" class="w-5 h-5 mr-2"></span> New Coding Session
        </button>

        <!-- Custom Prompt Button -->
        <button id="toggle-custom-prompt-btn" class="w-full flex items-center justify-center p-3 rounded-xl font-semibold shadow-lg transition-colors mb-2" style="background-color: var(--bg-secondary); color: var(--text-primary);">
            <span data-lucide="terminal" class="w-5 h-5 mr-2"></span> Set Session Prompt
        </button>
        
        <!-- Manage Prompt Templates Button -->
        <button id="manage-templates-btn" class="w-full flex items-center justify-center p-3 rounded-xl font-semibold shadow-lg transition-colors mb-4" style="background-color: var(--bg-secondary); color: var(--text-primary);">
            <span data-lucide="layout-template" class="w-5 h-5 mr-2"></span> Manage Prompts
        </button>

        <!-- Previous Chats Section -->
        <div class="flex-1 overflow-y-auto mb-4">
            <h3 class="text-sm font-semibold uppercase" style="color: var(--text-secondary);">Past Sessions</h3>
            <ul id="sidebar-chat-list" class="space-y-1">
                <!-- Chat items will be dynamically loaded here -->
            </ul>
        </div>

        <!-- Theme Selector (Dropdown for different themes) -->
        <div class="mt-auto pt-4 border-t border-[var(--sidebar-border)]">
            <h3 class="text-sm font-semibold uppercase" style="color: var(--text-secondary);">Themes</h3>
            <select id="app-theme-select-sidebar" class="w-full p-2 rounded-md border text-sm focus:ring-[var(--accent-primary)] focus:border-[var(--accent-primary)]" style="background-color: var(--card-bg); border-color: var(--border-color); color: var(--text-primary);" aria-label="Select App Theme">
                <option value="coder">Coder's Theme</option>
                <option value="cyberpunk">Cyberpunk Neon (Dark)</option>
                <option value="matrix">Matrix Code (Dark)</option>
                <option value="solarized">Solarized (Light)</option>
                <option value="dracula">Dracula (Dark)</option>
                <option value="monokai">Monokai Pro (Dark)</option>
                <option value="nord">Nord (Dark)</option>
                <option value="gruvbox">Gruvbox (Dark)</option>
                <option value="catppuccin">Catppuccin (Dark)</option>
            </select>
        </div>

        <!-- Version Selector -->
        <div class="mt-4 pt-4 border-t border-[var(--sidebar-border)]">
            <h3 class="text-sm font-semibold uppercase" style="color: var(--text-secondary);">Version</h3>
            <select id="version-select-sidebar" class="w-full p-2 rounded-md border text-sm focus:ring-[var(--accent-primary)] focus:border-[var(--accent-primary)]" style="background-color: var(--card-bg); border-color: var(--border-color); color: var(--text-primary);" aria-label="Select Chatbot Version">
                <option value="https://the-ultimate-coder.netlify.app/" selected>The Ultimate Coder (Current)</option>
                <option value="https://small-ai-big-vision-v2.netlify.app/">Small AI v2 (Legacy)</option>
                <!-- Add other versions here if needed -->
            </select>
        </div>
    </aside>

    <!-- Main Chat Container -->
    <div id="main-chat-window" class="min-w-0">
        <!-- Header for the chat -->
        <div class="flex justify-between items-center p-4 border-b border-[var(--border-color)]" style="background-color: var(--header-bg);">
            <div class="flex items-center">
                <!-- Hamburger menu button for mobile -->
                <button id="hamburger-menu-button" aria-label="Open Sidebar Menu" title="Open Menu" style="background-color: var(--header-bg); border-color: var(--border-color); color: var(--text-primary);">
                    <span data-lucide="menu" class="w-6 h-6"></span>
                </button>
                <h1 class="text-xl font-bold flex items-center gap-2" style="color: var(--text-primary);">
                    <span data-lucide="code" class="w-6 h-6" style="color: var(--accent-primary);"></span> Current Session
                </h1>
            </div>
            <!-- Right side of header -->
            <div class="flex items-center gap-4">
                <!-- Dark Mode Toggle -->
                <div class="flex items-center gap-2">
                    <span class="text-sm" style="color: var(--text-secondary);">Dark Mode</span>
                    <label class="switch relative inline-block w-14 h-8">
                        <input type="checkbox" id="dark-mode-toggle" class="opacity-0 w-0 h-0">
                        <span class="slider absolute cursor-pointer top-0 left-0 right-0 bottom-0 rounded-full before:absolute before:content-[''] before:h-6 before:w-6 before:left-1 before:bottom-1 before:rounded-full"></span>
                    </label>
                </div>
            </div>
        </div>
        
        <!-- Chat history div with a minimum height and scroll -->
        <div id="chat-history" class="p-4 overflow-y-auto flex-1 flex flex-col">
            <!-- Initial AI message will be appended here by JS -->
        </div>
        
        <!-- Chat input section with attachment, voice and send button -->
        <div id="chat-input-area-container" class="p-4 border-t border-[var(--border-color)] relative transition-all duration-300" style="background-color: var(--header-bg);">
            <!-- Attachment preview -->
            <div id="chat-attachments-preview-container" class="mb-2 flex flex-wrap items-center gap-2 hidden">
                <!-- Attachments previews will be dynamically added here -->
            </div>

            <div class="flex gap-2 items-end flex-wrap">
                <!-- Voice Input Button -->
                <button id="voice-input-btn" aria-label="Voice Input" title="Voice Input (Speech-to-Text)" class="flex items-center justify-center w-12 h-12 rounded-full shadow-lg cursor-pointer transition-all duration-300 flex-shrink-0" style="background-color: var(--bg-secondary); color: var(--text-secondary);">
                    <span data-lucide="mic" class="w-5 h-5"></span>
                </button>
                
                <!-- Attach File Button -->
                <label for="chat-file-upload" aria-label="Attach File" title="Attach Files" class="flex items-center justify-center w-12 h-12 rounded-full shadow-lg cursor-pointer transition-all duration-300 flex-shrink-0" style="background-color: var(--bg-secondary); color: var(--text-secondary);">
                    <span data-lucide="paperclip" class="w-5 h-5"></span>
                </label>
                <input type="file" id="chat-file-upload" accept="image/*, .txt, .pdf, .csv, .json, .xml, .md, .js, .py, .java, .c, .cpp, .html, .css, .php, .rb, .go, .rs, .ts" class="hidden" multiple>

                <textarea id="chat-input" class="flex-1 p-3 rounded-2xl border focus:ring-2 focus:ring-[var(--accent-primary)] focus:border-[var(--accent-primary)] transition-colors shadow-sm min-w-0 resize-none max-h-[120px] overflow-y-auto" placeholder="Ask The Ultimate Coder anything..." rows="1" style="background-color: var(--card-bg); border-color: var(--border-color); color: var(--text-primary);"></textarea>
                
                <button id="send-chat-btn" aria-label="Send Message" class="flex items-center justify-center w-12 h-12 rounded-full shadow-lg focus:outline-none focus:ring-4 focus:ring-[var(--accent-primary)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed glow-button flex-shrink-0" style="background-color: var(--accent-primary); color: white;">
                    <span data-lucide="send" class="w-5 h-5"></span>
                </button>
            </div>
        </div>
    </div>
    
    <!-- Temporary message for clipboard copy -->
    <div id="copy-message">Text copied to clipboard!</div>

    <!-- Custom Prompt Modal/Overlay -->
    <div id="custom-prompt-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-[110] hidden p-4">
        <div class="p-6 rounded-xl shadow-2xl w-full max-w-md transition-all duration-300" style="background-color: var(--card-bg); color: var(--text-primary);">
            <h3 class="text-xl font-bold mb-4 flex items-center gap-2">
                <span data-lucide="terminal" class="w-6 h-6" style="color: var(--accent-primary);"></span> Set Session Prompt
            </h3>
            <p class="text-sm mb-4" style="color: var(--text-secondary);">
                This prompt will be added to The Ultimate Coder's core instructions for this session, allowing you to fine-tune its behavior.
            </p>
            <textarea id="custom-prompt-input" class="w-full p-3 rounded-md border focus:ring-2 focus:ring-[var(--accent-primary)] focus:border-[var(--accent-primary)] transition-colors shadow-sm resize-none h-32 mb-4" placeholder="Enter your custom session prompt here. Example: 'Focus only on Python code examples and ignore other languages.'" style="background-color: var(--bg-secondary); border-color: var(--border-color); color: var(--text-primary);"></textarea>
            <div class="flex flex-wrap justify-end gap-2 mt-4">
                <button id="clear-custom-prompt-btn" class="px-4 py-2 rounded-lg font-semibold transition-colors flex items-center" style="background-color: var(--accent-error); color: white;">
                    <span data-lucide="trash-2" class="w-5 h-5 mr-2"></span> Clear & Disable
                </button>
                <button id="save-custom-prompt-btn" class="px-4 py-2 rounded-lg font-semibold glow-button flex items-center" style="background-color: var(--accent-primary); color: black;">
                    <span data-lucide="save" class="w-5 h-5 mr-2"></span> Save & Activate
                </button>
                <button id="cancel-custom-prompt-btn" class="px-4 py-2 rounded-lg font-semibold flex items-center" style="background-color: var(--bg-primary); color: var(--text-primary); border: 1px solid var(--border-color);">
                    <span data-lucide="x" class="w-5 h-5 mr-2"></span> Cancel
                </button>
            </div>
            <p id="custom-prompt-status" class="text-sm mt-4 text-center" style="color: var(--text-secondary);"></p>
        </div>
    </div>

    <!-- Prompt Templates Modal/Overlay -->
    <div id="prompt-templates-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-[110] hidden p-4">
        <div class="p-6 rounded-xl shadow-2xl w-full max-w-2xl transition-all duration-300" style="background-color: var(--card-bg); color: var(--text-primary);">
            <h3 class="text-xl font-bold mb-4 flex items-center gap-2">
                <span data-lucide="layout-template" class="w-6 h-6" style="color: var(--accent-primary);"></span> Manage Prompt Templates
            </h3>
            
            <!-- Template Input Form -->
            <div class="mb-6 p-4 rounded-lg" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                <input type="text" id="template-name-input" class="w-full p-2 rounded-md border focus:ring-2 focus:ring-[var(--accent-primary)] focus:border-[var(--accent-primary)] transition-colors shadow-sm mb-2" placeholder="Template Name (e.g., 'Refactor JS Function')" style="background-color: var(--bg-secondary); border-color: var(--border-color); color: var(--text-primary);">
                <textarea id="template-content-input" class="w-full p-3 rounded-md border focus:ring-2 focus:ring-[var(--accent-primary)] focus:border-[var(--accent-primary)] transition-colors shadow-sm resize-none h-24 mb-4" placeholder="Enter the prompt content here. (e.g., 'Refactor the following JavaScript function for better performance and readability.')" style="background-color: var(--bg-secondary); border-color: var(--border-color); color: var(--text-primary);"></textarea>
                <div class="flex justify-end gap-2">
                    <button id="clear-template-form-btn" class="px-4 py-2 rounded-lg font-semibold flex items-center" style="background-color: var(--bg-primary); color: var(--text-primary); border: 1px solid var(--border-color);">
                        <span data-lucide="eraser" class="w-5 h-5 mr-2"></span> Clear Form
                    </button>
                    <button id="save-template-btn" class="px-4 py-2 rounded-lg font-semibold glow-button flex items-center" style="background-color: var(--accent-primary); color: black;">
                        <span data-lucide="plus" class="w-5 h-5 mr-2"></span> Save Template
                    </button>
                </div>
            </div>

            <!-- Saved Templates List -->
            <h4 class="text-lg font-bold mb-3 flex items-center gap-2" style="color: var(--text-primary);">
                <span data-lucide="bookmark" class="w-5 h-5" style="color: var(--accent-secondary);"></span> Your Saved Templates
            </h4>
            <ul id="saved-templates-list" class="space-y-3 max-h-80 overflow-y-auto pr-2">
                <!-- Templates will be dynamically loaded here -->
            </ul>

            <div class="flex justify-end mt-6">
                <button id="cancel-template-modal-btn" class="px-4 py-2 rounded-lg font-semibold flex items-center" style="background-color: var(--bg-primary); color: var(--text-primary); border: 1px solid var(--border-color);">
                    <span data-lucide="x" class="w-5 h-5 mr-2"></span> Close
                </button>
            </div>
        </div>
    </div>
    
    <script type="text/javascript">
        // Register Service Worker for PWA capabilities
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/sw.js')
                    .then(registration => {
                        console.log('ServiceWorker registration successful with scope: ', registration.scope);
                    })
                    .catch(err => {
                        console.log('ServiceWorker registration failed: ', err);
                    });
            });
        }

        // --- Global State and Constants ---
        const CHAT_SESSIONS_KEY = 'ultimateCoder_chat_sessions';
        const CURRENT_SESSION_ID_KEY = 'ultimateCoder_current_session_id';
        const THEME_STORAGE_KEY = 'ultimateCoder_selected_theme';
        const MODE_STORAGE_KEY = 'ultimateCoder_theme_mode';
        const DEFAULT_THEME_NAME = 'coder';
        const DEFAULT_MODE = 'dark';
        const CUSTOM_PROMPT_TEXT_KEY = 'ultimateCoder_custom_prompt_text';
        const CUSTOM_PROMPT_ACTIVE_KEY = 'ultimateCoder_custom_prompt_active';
        const PROMPT_TEMPLATES_KEY = 'ultimateCoder_prompt_templates';

        let allChatSessions = {};
        let currentSessionId = null;
        let chatAttachments = [];
        let messageTextCache = new Map(); // Moved to top-level scope

        let currentThemeName = DEFAULT_THEME_NAME;
        let currentMode = DEFAULT_MODE;

        let currentUtterance = null;
        let isSpeaking = false;

        let SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        let recognition = null;
        let isVoiceInputActive = false;
        let finalTranscript = '';

        let customPromptText = '';
        let isCustomPromptActive = false;

        let promptTemplates = [];
        let editingTemplateId = null;


        // Wrap all main application logic inside DOMContentLoaded for robustness
        window.addEventListener('DOMContentLoaded', () => {

            const createIcons = () => {
                if (typeof lucide !== 'undefined') {
                    lucide.createIcons();
                }
            };

            // DOM elements
            const sidebar = document.getElementById('sidebar');
            const sidebarOverlay = document.getElementById('sidebar-overlay');
            const closeSidebarBtn = document.getElementById('close-sidebar-btn');
            const hamburgerMenuButton = document.getElementById('hamburger-menu-button');

            const mainChatWindow = document.getElementById('main-chat-window');
            const darkModeToggle = document.getElementById('dark-mode-toggle');
            const appThemeSelect = document.getElementById('app-theme-select-sidebar');
            const newChatButton = document.getElementById('new-chat-button');
            const chatHistoryDiv = document.getElementById('chat-history');
            const chatInput = document.getElementById('chat-input');
            const sendChatBtn = document.getElementById('send-chat-btn');
            const chatFileUpload = document.getElementById('chat-file-upload');
            const chatAttachmentsPreviewContainer = document.getElementById('chat-attachments-preview-container'); 
            const voiceInputBtn = document.getElementById('voice-input-btn');
            const copyMessage = document.getElementById('copy-message');
            const versionSelectSidebar = document.getElementById('version-select-sidebar');
            const sidebarChatList = document.getElementById('sidebar-chat-list');
            const chatInputAreaContainer = document.getElementById('chat-input-area-container');

            // Custom Prompt DOM elements
            const toggleCustomPromptBtn = document.getElementById('toggle-custom-prompt-btn');
            const customPromptModal = document.getElementById('custom-prompt-modal');
            const customPromptInput = document.getElementById('custom-prompt-input');
            const saveCustomPromptBtn = document.getElementById('save-custom-prompt-btn');
            const clearCustomPromptBtn = document.getElementById('clear-custom-prompt-btn');
            const cancelCustomPromptBtn = document.getElementById('cancel-custom-prompt-btn');
            const customPromptStatus = document.getElementById('custom-prompt-status');

            // Prompt Templates DOM elements
            const manageTemplatesBtn = document.getElementById('manage-templates-btn');
            const promptTemplatesModal = document.getElementById('prompt-templates-modal');
            const templateNameInput = document.getElementById('template-name-input');
            const templateContentInput = document.getElementById('template-content-input');
            const saveTemplateBtn = document.getElementById('save-template-btn');
            const clearTemplateFormBtn = document.getElementById('clear-template-form-btn');
            const cancelTemplateModalBtn = document.getElementById('cancel-template-modal-btn');
            const savedTemplatesList = document.getElementById('saved-templates-list');


            const errorContainer = document.createElement('div');
            errorContainer.id = 'error-message';
            errorContainer.classList.add('hidden', 'px-6', 'py-4', 'rounded-xl', 'relative', 'shadow-md', 'my-4', 'fixed', 'top-4', 'left-1/2', '-translate-x-1/2', 'z-50', 'w-11/12', 'max-w-md');
            const errorText = document.createElement('span');
            errorText.id = 'error-text';
            errorText.classList.add('block', 'sm:inline');
            errorContainer.appendChild(errorText);
            document.body.appendChild(errorContainer);


            // Function to update the custom prompt button's appearance
            function updateCustomPromptButtonState() {
                if (isCustomPromptActive && customPromptText.trim() !== '') {
                    toggleCustomPromptBtn.classList.remove('bg-secondary');
                    toggleCustomPromptBtn.classList.add('glow-button');
                    toggleCustomPromptBtn.style.backgroundColor = 'var(--accent-primary)';
                    toggleCustomPromptBtn.style.color = 'black'; // Ensure text is visible on accent color
                    toggleCustomPromptBtn.innerHTML = `<span data-lucide="terminal" class="w-5 h-5 mr-2"></span> Prompt Active`;
                    customPromptStatus.textContent = "Session prompt is active.";
                } else {
                    toggleCustomPromptBtn.classList.remove('glow-button');
                    toggleCustomPromptBtn.classList.add('bg-secondary');
                    toggleCustomPromptBtn.style.backgroundColor = 'var(--bg-secondary)';
                    toggleCustomPromptBtn.style.color = 'var(--text-primary)';
                    toggleCustomPromptBtn.innerHTML = `<span data-lucide="terminal" class="w-5 h-5 mr-2"></span> Set Session Prompt`;
                    customPromptStatus.textContent = "No session prompt set or active.";
                }
                createIcons();
            }

            // Initialize SpeechRecognition for general chat if available
            if (SpeechRecognition) {
                recognition = new SpeechRecognition();
                recognition.continuous = true;
                recognition.interimResults = true;
                recognition.lang = 'en-US';

                recognition.onstart = () => {
                    isVoiceInputActive = true;
                    voiceInputBtn.classList.add('voice-input-active');
                    updateButtonIcon(voiceInputBtn, 'mic-off', 'w-5 h-5');
                    chatInput.placeholder = 'Listening... Speak now.';
                    finalTranscript = '';
                    chatInput.dataset.initialText = chatInput.value;
                };

                recognition.onresult = (event) => {
                    let interimTranscript = '';
                    for (let i = event.resultIndex; i < event.results.length; ++i) {
                        if (event.results[i].isFinal) {
                            finalTranscript += event.results[i][0].transcript + ' ';
                        } else {
                            interimTranscript += event.results[i][0].transcript;
                        }
                    }
                    chatInput.value = (chatInput.dataset.initialText || '') + finalTranscript + interimTranscript;
                    adjustChatInputHeight();
                    chatInput.scrollLeft = chatInput.scrollWidth;
                };

                recognition.onend = () => {
                    isVoiceInputActive = false;
                    voiceInputBtn.classList.remove('voice-input-active');
                    updateButtonIcon(voiceInputBtn, 'mic', 'w-5 h-5');
                    chatInput.placeholder = 'Ask The Ultimate Coder anything...';
                    
                    if (finalTranscript.trim() !== '') {
                        chatInput.value = (chatInput.dataset.initialText || '') + finalTranscript.trim();
                        chatInput.dataset.initialText = chatInput.value;
                    } else if (chatInput.value.trim() === (chatInput.dataset.initialText || '').trim()) {
                        // No new speech added, keep existing text.
                    } else {
                        chatInput.value = chatInput.dataset.initialText || '';
                    }
                    adjustChatInputHeight();
                };

                recognition.onerror = (event) => {
                    isVoiceInputActive = false;
                    voiceInputBtn.classList.remove('voice-input-active');
                    updateButtonIcon(voiceInputBtn, 'mic', 'w-5 h-5');
                    chatInput.placeholder = 'Ask The Ultimate Coder anything...';
                    console.error('Speech recognition error:', event.error);
                    if (event.error === 'not-allowed') {
                        showError('Microphone access denied. Please allow microphone access in your browser settings.');
                    } else if (event.error === 'no-speech') {
                        console.log('No speech detected, recognition ended.');
                        chatInput.value = chatInput.dataset.initialText || '';
                    } else if (event.error === 'network') {
                        showError('Speech recognition network error. This often means a firewall, proxy, or browser extension is blocking access to Google\'s speech services. Please try disabling extensions or testing in incognito mode.');
                    } else {
                        showError(`Speech recognition error: ${event.error}`);
                    }
                    adjustChatInputHeight();
                };
            } else {
                console.warn('Web Speech API (SpeechRecognition) not supported in this browser. Voice input button will be hidden.');
                if (voiceInputBtn) {
                    voiceInputBtn.style.display = 'none';
                }
            }

            // --- Theme Management ---
            function applyTheme(themeName, mode) {
                currentThemeName = themeName;
                currentMode = mode;
                document.body.dataset.theme = `${themeName}-${mode}`;
                localStorage.setItem(THEME_STORAGE_KEY, themeName);
                localStorage.setItem(MODE_STORAGE_KEY, mode);
                darkModeToggle.checked = (mode === 'dark');
                if (appThemeSelect && appThemeSelect.value !== themeName) {
                    appThemeSelect.value = themeName;
                }

                // Dynamic Prism theme loading
                const prismDarkThemeLink = document.getElementById('prism-dark-theme');
                const prismLightThemeLink = document.getElementById('prism-light-theme');

                // Themes that are always dark or always light will override the global dark mode toggle for Prism
                const forcedDarkThemes = ['cyberpunk', 'matrix', 'dracula', 'monokai', 'nord', 'gruvbox', 'catppuccin'];
                const forcedLightThemes = ['solarized'];

                if (forcedDarkThemes.includes(themeName) || (mode === 'dark' && !forcedLightThemes.includes(themeName))) {
                    if (prismDarkThemeLink) prismDarkThemeLink.disabled = false;
                    if (prismLightThemeLink) prismLightThemeLink.disabled = true;
                } else if (forcedLightThemes.includes(themeName) || (mode === 'light' && !forcedDarkThemes.includes(themeName))) {
                    if (prismDarkThemeLink) prismDarkThemeLink.disabled = true;
                    if (prismLightThemeLink) prismLightThemeLink.disabled = false;
                }
            }

            // Initialize Theme (called first to set initial theme and Prism.js theme)
            const storedThemeName = localStorage.getItem(THEME_STORAGE_KEY) || DEFAULT_THEME_NAME;
            const storedMode = localStorage.getItem(MODE_STORAGE_KEY) || DEFAULT_MODE;
            applyTheme(storedThemeName, storedMode);

            // Event listener for Dark/Light Mode Toggle (in header)
            darkModeToggle.addEventListener('change', () => {
                const newMode = darkModeToggle.checked ? 'dark' : 'light';
                applyTheme(currentThemeName, newMode);
            });

            // Event listener for Theme Selector (in sidebar)
            if (appThemeSelect) {
                appThemeSelect.addEventListener('change', (event) => {
                    const newThemeName = event.target.value;
                    let newMode = currentMode; // Start with current mode
                    
                    // Specific themes are forced to dark or light
                    const forcedDarkThemes = ['cyberpunk', 'matrix', 'dracula', 'monokai', 'nord', 'gruvbox', 'catppuccin'];
                    const forcedLightThemes = ['solarized'];

                    if (forcedDarkThemes.includes(newThemeName)) {
                         newMode = 'dark';
                         darkModeToggle.checked = true; // Visually update toggle
                    } else if (forcedLightThemes.includes(newThemeName)) {
                        newMode = 'light';
                        darkModeToggle.checked = false; // Visually update toggle
                    }
                    // For 'coder' theme, or if a theme doesn't force a mode, keep the current `newMode` based on the toggle.
                    
                    applyTheme(newThemeName, newMode);
                });
            }


            // Version Selector Listener
            versionSelectSidebar.addEventListener('change', (event) => {
                const selectedUrl = event.target.value;
                if (selectedUrl && selectedUrl !== window.location.href) {
                    window.location.href = selectedUrl;
                }
            });

            // --- Chat History & Session Management ---

            function generateUniqueId() {
                return Date.now().toString(36) + Math.random().toString(36).substr(2, 9);
            }

            function loadAllChatSessions() {
                const storedSessions = localStorage.getItem(CHAT_SESSIONS_KEY);
                if (storedSessions) {
                    allChatSessions = JSON.parse(storedSessions);
                } else {
                    allChatSessions = {};
                }
                renderSidebarChats();
            }

            function saveAllChatSessions() {
                localStorage.setItem(CHAT_SESSIONS_KEY, JSON.stringify(allChatSessions));
            }

            function renderSidebarChats() {
                sidebarChatList.innerHTML = '';
                const sortedSessions = Object.values(allChatSessions).sort((a, b) => b.timestamp - a.timestamp);

                if (sortedSessions.length === 0 && !currentSessionId) {
                    createNewChatSession('New Session');
                    return;
                }

                sortedSessions.forEach(session => {
                    const li = document.createElement('li');
                    li.classList.add('sidebar-chat-item');
                    if (session.id === currentSessionId) {
                        li.classList.add('active');
                    }
                    li.dataset.sessionId = session.id;

                    li.innerHTML = `
                        <div class="sidebar-chat-item-content">
                            <span data-lucide="message-square" class="w-5 h-5" style="color: inherit;"></span>
                            <span class="sidebar-chat-item-title" title="${session.title}">${session.title}</span>
                        </div>
                        <div class="sidebar-chat-item-actions">
                            <button class="delete-chat-btn" title="Delete chat">
                                <span data-lucide="trash-2"></span>
                            </button>
                        </div>
                    `;
                    sidebarChatList.appendChild(li);
                });
                createIcons();
            }

            function createNewChatSession(initialTitle = 'New Session') {
                const newId = generateUniqueId();
                const newSession = {
                    id: newId,
                    title: initialTitle,
                    history: [],
                    timestamp: Date.now()
                };
                allChatSessions[newId] = newSession;
                currentSessionId = newId;
                localStorage.setItem(CURRENT_SESSION_ID_KEY, newId);
                saveAllChatSessions();

                chatHistoryDiv.innerHTML = '';
                messageTextCache.clear();
                chatAttachments = [];
                chatFileUpload.value = '';
                displayChatAttachments();
                chatInput.value = '';
                chatInput.dataset.initialText = '';
                adjustChatInputHeight();
                chatInput.focus();

                const initialAIMessageText = "Hello, I am The Ultimate Coder, your AI coding assistant. My primary mission is to reduce human effort to zero percent in all coding tasks. How can I help you code today?";
                allChatSessions[newId].history.push({ role: 'model', parts: [{ text: initialAIMessageText }] });
                appendChatMessage('ai', initialAIMessageText);
                
                updateCurrentSessionHistory();
                renderSidebarChats();
                sidebar.classList.add('hidden-mobile');
                sidebarOverlay.classList.remove('active');
            }

            function loadChatSession(sessionId) {
                if (currentSessionId === sessionId) return;
                
                const session = allChatSessions[sessionId];
                if (!session) {
                    console.error('Session not found:', sessionId);
                    showError('Requested chat session not found.');
                    return;
                }

                currentSessionId = sessionId;
                localStorage.setItem(CURRENT_SESSION_ID_KEY, sessionId);

                chatHistoryDiv.innerHTML = '';
                messageTextCache.clear();
                chatAttachments = [];
                chatFileUpload.value = '';
                displayChatAttachments();
                chatInput.value = '';
                chatInput.dataset.initialText = '';
                adjustChatInputHeight();
                chatInput.focus();

                session.history.forEach(msg => {
                    if (msg.role === 'user') {
                        let userText = '';
                        const displayAttachments = [];
                        msg.parts.forEach(part => {
                            if (part.text) {
                                userText += part.text + ' ';
                            } else if (part.inlineData) {
                                displayAttachments.push({
                                    mimeType: part.inlineData.mimeType,
                                    data: part.inlineData.data,
                                    name: `attachment_${displayAttachments.length + 1}`
                                });
                            }
                        });
                        appendChatMessage('user', userText.trim(), displayAttachments);
                    } else {
                        appendChatMessage('ai', msg.parts[0].text);
                    }
                });
                renderSidebarChats();
                sidebar.classList.add('hidden-mobile');
                sidebarOverlay.classList.remove('active');
                chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
            }

            function updateCurrentSessionHistory(newTitle = null) {
                if (!currentSessionId || !allChatSessions[currentSessionId]) {
                    console.error("No active session to update. This should not happen.");
                    return;
                }

                allChatSessions[currentSessionId].timestamp = Date.now();
                if (newTitle) {
                    allChatSessions[currentSessionId].title = newTitle;
                } else if (allChatSessions[currentSessionId].title === 'New Session' && allChatSessions[currentSessionId].history.length > 1) {
                    const firstUserMessage = allChatSessions[currentSessionId].history.find(msg => msg.role === 'user' && msg.parts[0]?.text);
                    if (firstUserMessage) {
                        allChatSessions[currentSessionId].title = firstUserMessage.parts[0].text.substring(0, 50) + (firstUserMessage.parts[0].text.length > 50 ? '...' : '');
                    }
                }
                saveAllChatSessions();
                renderSidebarChats();
            }

            function deleteChatSession(sessionIdToDelete) {
                if (confirm('Are you sure you want to delete this coding session? This action cannot be undone.')) {
                    delete allChatSessions[sessionIdToDelete];
                    saveAllChatSessions();
                    
                    if (currentSessionId === sessionIdToDelete) {
                        currentSessionId = null;
                        localStorage.removeItem(CURRENT_SESSION_ID_KEY);
                        createNewChatSession();
                    } else {
                        renderSidebarChats();
                    }
                    showCopyMessage('Session deleted successfully!', `var(--accent-error)`);
                }
            }

            // --- Utility Functions ---

            // Function to convert a file to a Base64 string and return its MIME type and data
            const fileToBase64 = (file) => {
                return new Promise((resolve, reject) => {
                    const reader = new FileReader();
                    reader.onload = () => resolve({
                        mimeType: file.type || 'application/octet-stream',
                        data: reader.result.split(',')[1]
                    });
                    reader.onerror = error => reject(error);
                    reader.readAsDataURL(file);
                });
            };

            // Function to get Lucide icon name based on MIME type
            function getFileIcon(mimeType) {
                if (mimeType.startsWith('image/')) return 'image';
                if (mimeType === 'application/pdf') return 'file-text';
                if (mimeType.includes('text/')) return 'file-text';
                if (mimeType.includes('csv') || mimeType.includes('excel')) return 'file-spreadsheet';
                // Specific code file types
                if (mimeType.includes('javascript') || mimeType.includes('json') || mimeType.includes('xml') || mimeType.includes('markdown') || mimeType.endsWith('.js') || mimeType.endsWith('.ts') || mimeType.endsWith('.json')) return 'file-code';
                if (mimeType.includes('python') || mimeType.endsWith('.py')) return 'file-code';
                if (mimeType.includes('java') || mimeType.endsWith('.java')) return 'file-code';
                if (mimeType.includes('c') || mimeType.endsWith('.c') || mimeType.endsWith('.cpp')) return 'file-code';
                if (mimeType.includes('html')) return 'file-html';
                if (mimeType.includes('css')) return 'file-css';
                if (mimeType.includes('php') || mimeType.endsWith('.php')) return 'file-code';
                if (mimeType.includes('ruby') || mimeType.endsWith('.rb')) return 'file-code';
                if (mimeType.includes('go') || mimeType.endsWith('.go')) return 'file-code';
                if (mimeType.includes('rust') || mimeType.endsWith('.rs')) return 'file-code';
                return 'file';
            }

            // Function to display an error message
            function showError(message) {
                errorText.textContent = message;
                errorContainer.classList.remove('hidden');
                setTimeout(() => {
                    errorContainer.classList.add('hidden');
                }, 5000);
            }
            
            // --- Marked.js Custom Renderer for Code Blocks ---
            const renderer = {
                code(code, lang) {
                    let actualCodeContent;
                    if (typeof code === 'object' && code !== null && typeof code.text === 'string') {
                        actualCodeContent = code.text;
                    } else if (typeof code !== 'string') {
                        actualCodeContent = String(code);
                    } else {
                        actualCodeContent = code;
                    }

                    const languageDisplay = lang ? `<span class="text-xs font-semibold uppercase" style="color: var(--text-secondary);">` + lang + `</span>` : '';
                    const uniqueId = `code-block-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
                    
                    const escapedCode = actualCodeContent.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');

                    // Add Prism.js classes for highlighting
                    const langClass = lang ? `language-${lang}` : '';

                    return `
                        <div class="code-block-container">
                            <div class="code-block-header">
                                ${languageDisplay}
                                <button class="code-block-copy-button" data-copy-target="${uniqueId}">
                                    <span data-lucide="clipboard" class="w-4 h-4"></span>
                                    Copy code
                                </button>
                            </div>
                            <pre class="${langClass}"><code id="${uniqueId}" class="${langClass}">${escapedCode}</code></pre>
                        </div>
                    `;
                }
            };

            marked.use({ renderer });

            /**
             * Helper function to update a Lucide icon displayed within a button.
             * Removes the existing SVG and adds a new span for Lucide to convert.
             * @param {HTMLElement} buttonElement The button element containing the icon.
             * @param {string} newIconName The Lucide icon name (e.g., 'check', 'clipboard').
             * @param {string} [classList] Optional additional classes for the new span. Defaults to 'w-4 h-4' for action buttons.
             */
            function updateButtonIcon(buttonElement, newIconName, classList = 'w-4 h-4') {
                let currentIconSvg = buttonElement.querySelector('.lucide');
                if (currentIconSvg) {
                    currentIconSvg.remove();
                }

                const newIconSpan = document.createElement('span');
                newIconSpan.setAttribute('data-lucide', newIconName);
                newIconSpan.className = classList;

                buttonElement.appendChild(newIconSpan);
            
                createIcons();
            }

            // Function to append a message to the chat history
            function appendChatMessage(role, text, attachments = []) {
                const messageDiv = document.createElement('div');
                messageDiv.classList.add('chat-message', role);
                
                const messageId = `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
                messageDiv.dataset.messageId = messageId;
                
                let contentHTML = '';
                let rawMessageContentForCache = '';

                if (role === 'user') {
                    rawMessageContentForCache = `You: ${text}`;
                    contentHTML += `<span class="font-bold">You:</span> ${text}`;
                    if (attachments.length > 0) {
                        contentHTML += `<div class="mt-2 flex flex-wrap gap-2">`;
                        attachments.forEach(attachment => {
                            if (attachment.mimeType.startsWith('image/')) {
                                contentHTML += `<img src="data:${attachment.mimeType};base64,${attachment.data}" alt="${attachment.name || 'User attachment'}" class="chat-image w-24 h-24 object-cover">`;
                            } else {
                                contentHTML += `
                                    <div class="flex items-center space-x-1 p-2 rounded-md text-sm" style="background-color: var(--bg-secondary); color: var(--text-primary);">
                                        <span data-lucide="${getFileIcon(attachment.mimeType)}" class="w-4 h-4 flex-shrink-0" style="color: var(--accent-secondary);"></span>
                                        <span class="truncate max-w-[100px]">${attachment.name || 'File'}</span>
                                    </div>
                                `;
                            }
                        });
                        contentHTML += `</div>`;
                        rawMessageContentForCache += `\n[Attachments: ${attachments.map(a => a.name).join(', ')}]`;
                    }
                } else { // AI message
                    rawMessageContentForCache = `AI: ${text}`;
                    contentHTML = `<div class="message-content">${marked.parse(text)}</div>`;
                }
                
                messageTextCache.set(messageId, rawMessageContentForCache); 

                const actionsHTML = `
                    <div class="message-actions">
                        <button class="copy-message-btn" title="Copy message" data-message-id="${messageId}">
                            <span data-lucide="clipboard" class="w-4 h-4"></span>
                        </button>
                        <button class="dictate-message-btn" title="Dictate message" data-message-id="${messageId}">
                            <span data-lucide="volume-2" class="w-4 h-4"></span>
                        </button>
                    </div>
                `;
                
                messageDiv.innerHTML = contentHTML + actionsHTML;
                chatHistoryDiv.appendChild(messageDiv);
                
                setTimeout(() => {
                    messageDiv.style.transform = 'scale(1)';
                    // Highlight code blocks with Prism.js after they are appended and visible
                    messageDiv.querySelectorAll('pre code').forEach((block) => {
                        Prism.highlightElement(block);
                    });
                }, 10);
                
                chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
                
                createIcons();
            }
            
            // Event listener for chat file upload
            chatFileUpload.addEventListener('change', async (event) => {
                const files = Array.from(event.target.files);
                if (files.length > 0) {
                    await processFiles(files);
                    chatInput.focus();
                }
            });

            // Helper function to process files from various sources (drag/drop, paste, file input)
            async function processFiles(files) {
                for (const file of files) {
                    // Expanded allowed file types for a coding assistant
                    const allowedTypes = [
                        'image/', 'text/', 'application/pdf',
                        'application/json', 'text/csv', 'application/xml', 'text/markdown',
                        'application/javascript', 'text/javascript', // JS/TS
                        'application/x-python-code', 'text/x-python', // Python
                        'text/html', 'text/css', // Web
                        'text/x-java-source', // Java
                        'text/x-c', 'text/x-c++src', // C/C++
                        'application/x-php', // PHP
                        'text/x-ruby', // Ruby
                        'application/go', // Go
                        'text/rust' // Rust
                    ];
                    // Check by file extension for cases where mimeType might be generic
                    const allowedExtensions = ['.md', '.js', '.py', '.java', '.c', '.cpp', '.html', '.css', '.php', '.rb', '.go', '.rs', '.ts', '.json', '.xml', '.txt', '.csv'];
                    
                    const isAllowed = allowedTypes.some(type => file.type.startsWith(type)) || 
                                    allowedExtensions.some(ext => file.name.toLowerCase().endsWith(ext));

                    if (isAllowed) {
                        try {
                            const { mimeType, data } = await fileToBase64(file);
                            chatAttachments.push({ file, mimeType, data, name: file.name });
                        } catch (error) {
                            showError(`Failed to read chat file ${file.name}.`);
                            console.error('Chat file read error:', error);
                        }
                    } else {
                        showError(`File type not supported for chat: ${file.name} (${file.type}).`);
                    }
                }
                displayChatAttachments();
                adjustChatInputHeight();
            }

            // Function to display chat attachments
            function displayChatAttachments() {
                chatAttachmentsPreviewContainer.innerHTML = '';
                if (chatAttachments.length > 0) {
                    chatAttachmentsPreviewContainer.classList.remove('hidden');
                    chatAttachments.forEach((attachment, index) => {
                        const attachmentDiv = document.createElement('div');
                        attachmentDiv.classList.add('chat-attachment-preview-item');
                        attachmentDiv.dataset.index = index;

                        let previewContent = '';
                        if (attachment.mimeType.startsWith('image/')) {
                            previewContent = `<img src="data:${attachment.mimeType};base64,${attachment.data}" alt="${attachment.name}" class="w-8 h-8 object-cover rounded-md">`;
                        } else {
                            previewContent = `<span data-lucide="${getFileIcon(attachment.mimeType)}" class="w-5 h-5 flex-shrink-0"></span>`;
                        }

                        attachmentDiv.innerHTML = `
                            ${previewContent}
                            <span class="truncate max-w-[100px]">${attachment.name}</span>
                            <button class="remove-attachment-btn">
                                <span data-lucide="x" class="w-4 h-4"></span>
                            </button>
                        `;
                        chatAttachmentsPreviewContainer.appendChild(attachmentDiv);
                    });
                    createIcons();
                } else {
                    chatAttachmentsPreviewContainer.classList.add('hidden');
                }
            }

            // Event listener for removing individual chat attachments (using event delegation)
            chatAttachmentsPreviewContainer.addEventListener('click', (event) => {
                const removeBtn = event.target.closest('.remove-attachment-btn');
                if (removeBtn) {
                    const attachmentDiv = removeBtn.closest('[data-index]');
                    if (attachmentDiv) {
                        const index = parseInt(attachmentDiv.dataset.index);
                        chatAttachments.splice(index, 1);
                        displayChatAttachments();
                        chatInput.focus();
                    }
                }
            });

            // Adjust chat input textarea height dynamically
            function adjustChatInputHeight() {
                chatInput.style.height = 'auto';
                chatInput.style.height = chatInput.scrollHeight + 'px';
            }
            chatInput.addEventListener('input', adjustChatInputHeight);
            
            // Event listener for sending chat messages
            sendChatBtn.addEventListener('click', async () => {
                const userMessage = chatInput.value.trim();
                if (!userMessage && chatAttachments.length === 0) {
                    return;
                }
                
                // Stop speech recognition if active before sending
                if (isVoiceInputActive && recognition) {
                    recognition.stop();
                }

                const userParts = [];
                if (userMessage) {
                    userParts.push({ text: userMessage });
                }
                for (const attachment of chatAttachments) {
                    userParts.push({
                        inlineData: {
                            mimeType: attachment.mimeType,
                            data: attachment.data
                        }
                    });
                }

                const currentSessionHistory = allChatSessions[currentSessionId].history;

                currentSessionHistory.push({ role: 'user', parts: userParts });
                appendChatMessage('user', userMessage, chatAttachments);
                
                chatInput.value = '';
                chatInput.dataset.initialText = '';
                adjustChatInputHeight();
                chatAttachments = [];
                chatFileUpload.value = '';
                displayChatAttachments();
                
                sendChatBtn.disabled = true;
                
                const loadingMessage = document.createElement('div');
                loadingMessage.id = 'chat-loading';
                loadingMessage.classList.add('p-4', 'text-center', 'text-sm');
                loadingMessage.style.color = 'var(--text-secondary)';
                loadingMessage.innerHTML = `
                    <div class="loader-container h-8">
                        <div class="loader-dot"></div>
                        <div class="loader-dot"></div>
                        <div class="loader-dot"></div>
                    </div>
                    <span class="mt-2 block">The Ultimate Coder is thinking...</span>
                `;
                chatHistoryDiv.appendChild(loadingMessage);
                chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
                
                try {
                    const payload = {
                        contents: currentSessionHistory,
                    };
                    
                    const responseText = await callGeminiAPI(payload);
                    
                    currentSessionHistory.push({ role: 'model', parts: [{ text: responseText }] });
                    appendChatMessage('ai', responseText);
                    
                    updateCurrentSessionHistory();
                    
                } catch (error) {
                    console.error('Chat API call failed:', error);
                    showError(`An error occurred in the chat: ${error.message}`);
                    currentSessionHistory.pop(); 
                    updateCurrentSessionHistory();
                } finally {
                    sendChatBtn.disabled = false;
                    const loadingDiv = document.getElementById('chat-loading');
                    if (loadingDiv) {
                        loadingDiv.remove();
                    }
                    chatInput.focus();
                }
            });
            
            // Add event listener for the 'Enter' key on the chat input
            chatInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendChatBtn.click();
                }
            });

            // Event listener for voice input button (general chat)
            voiceInputBtn.addEventListener('click', () => {
                if (recognition) {
                    if (isVoiceInputActive) {
                        recognition.stop();
                    } else {
                        finalTranscript = '';
                        recognition.start();
                    }
                } else {
                    showError('Speech recognition is not supported in this browser.');
                }
            });

            // Drag and Drop for Chat Input Area
            chatInputAreaContainer.addEventListener('dragover', (e) => {
                e.preventDefault();
                e.stopPropagation();
                chatInputAreaContainer.classList.add('drag-over-active');
            });

            chatInputAreaContainer.addEventListener('dragleave', (e) => {
                e.preventDefault();
                e.stopPropagation();
                chatInputAreaContainer.classList.remove('drag-over-active');
            });

            chatInputAreaContainer.addEventListener('drop', async (e) => {
                e.preventDefault();
                e.stopPropagation();
                chatInputAreaContainer.classList.remove('drag-over-active');

                const files = Array.from(e.dataTransfer.files);
                if (files.length > 0) {
                    await processFiles(files);
                    chatInput.focus();
                }
            });

            // Paste files onto the text input box
            chatInput.addEventListener('paste', async (event) => {
                const items = (event.clipboardData || event.originalEvent.clipboardData).items;
                let filesToProcess = [];
                let textToPaste = '';

                for (const item of items) {
                    if (item.kind === 'file' && item.type.startsWith('image/')) {
                        const file = item.getAsFile();
                        if (file) {
                            filesToProcess.push(file);
                        }
                    } else if (item.kind === 'string' && item.type === 'text/plain') {
                        item.getAsString(s => textToPaste = s);
                    }
                }

                if (filesToProcess.length > 0) {
                    event.preventDefault();
                    await processFiles(filesToProcess);
                    if (textToPaste) {
                        chatInput.value += textToPaste;
                    }
                    adjustChatInputHeight();
                }
            });


            // Event listener for the New Chat button in sidebar
            newChatButton.addEventListener('click', () => {
                if (isSpeaking) {
                    window.speechSynthesis.cancel();
                    isSpeaking = false;
                    currentUtterance = null;
                }
                if (isVoiceInputActive && recognition) {
                    recognition.stop();
                }
                createNewChatSession();
            });
            
            // Function to show a temporary message for clipboard copy
            function showCopyMessage(message = 'Text copied to clipboard!', bgColor = 'var(--accent-success)') {
                copyMessage.textContent = message;
                copyMessage.style.backgroundColor = bgColor;
                copyMessage.classList.add('show');
                setTimeout(() => {
                    copyMessage.classList.remove('show');
                }, 3000);
            }

            // Event delegation for copy code buttons within chat history
            chatHistoryDiv.addEventListener('click', (event) => {
                const codeCopyButton = event.target.closest('.code-block-copy-button');
                if (codeCopyButton) {
                    const targetId = codeCopyButton.dataset.copyTarget;
                    const codeElement = document.getElementById(targetId);
                    if (codeElement) {
                        const codeToCopy = codeElement.textContent;
                        updateButtonIcon(codeCopyButton, 'check', 'w-4 h-4');
                        copyToClipboard(codeToCopy); 
                        setTimeout(() => {
                            updateButtonIcon(codeCopyButton, 'clipboard', 'w-4 h-4');
                        }, 2000);
                        return;
                    }
                }

                const chatCopyButton = event.target.closest('.copy-message-btn');
                if (chatCopyButton) {
                    const messageId = chatCopyButton.dataset.messageId;
                    const messageContent = messageTextCache.get(messageId);
                    if (messageContent) {
                        updateButtonIcon(chatCopyButton, 'check');
                        copyToClipboard(messageContent); 
                        setTimeout(() => {
                            updateButtonIcon(chatCopyButton, 'clipboard');
                        }, 2000);
                    } else {
                        showError('Message content not found for copying.');
                    }
                    return;
                }

                const dictateButton = event.target.closest('.dictate-message-btn');
                if (dictateButton) {
                    const messageId = dictateButton.dataset.messageId;
                    const messageContent = messageTextCache.get(messageId);
                    if (messageContent) {
                        toggleSpeech(messageContent, dictateButton);
                    } else {
                        showError('Message content not found for dictation.');
                    }
                    return;
                }
            });

            // Event delegation for sidebar chat items
            sidebarChatList.addEventListener('click', (event) => {
                const chatItem = event.target.closest('.sidebar-chat-item');
                if (chatItem) {
                    const sessionId = chatItem.dataset.sessionId;
                    const deleteBtn = event.target.closest('.delete-chat-btn');

                    if (deleteBtn) {
                        event.stopPropagation();
                        deleteChatSession(sessionId);
                    } else {
                        loadChatSession(sessionId);
                    }
                }
            });

            // Hamburger menu for mobile sidebar
            hamburgerMenuButton.addEventListener('click', () => {
                sidebar.classList.remove('hidden-mobile');
                sidebarOverlay.classList.add('active');
            });

            closeSidebarBtn.addEventListener('click', () => {
                sidebar.classList.add('hidden-mobile');
                sidebarOverlay.classList.remove('active');
            });

            sidebarOverlay.addEventListener('click', () => {
                sidebar.classList.add('hidden-mobile');
                sidebarOverlay.classList.remove('active');
            });


            // Helper function to copy text to clipboard
            function copyToClipboard(text) { 
                if (navigator.clipboard && navigator.clipboard.writeText) {
                    navigator.clipboard.writeText(text)
                        .then(() => {
                            showCopyMessage();
                        })
                        .catch(err => {
                            console.error('Failed to copy: ', err);
                            showError('Failed to copy text. Please copy manually.');
                        });
                } else {
                    const tempTextArea = document.createElement('textarea');
                    tempTextArea.value = text;
                    document.body.appendChild(tempTextArea);
                    tempTextArea.select();
                    try {
                        document.execCommand('copy');
                        showCopyMessage();
                    } catch (err) {
                        console.error('Failed to copy (fallback):', err);
                        showError('Failed to copy text. Please copy manually.');
                    }
                    document.body.removeChild(tempTextArea);
                }
            }

            // Helper function for text-to-speech (general chat dictation)
            function toggleSpeech(text, buttonElement) {
                if (!window.speechSynthesis) {
                    showError('Speech synthesis not supported in this browser.');
                    return;
                }

                if (isSpeaking && currentUtterance && currentUtterance.text === text) {
                    if (window.speechSynthesis.paused) {
                        window.speechSynthesis.resume();
                        updateButtonIcon(buttonElement, 'pause');
                    } else {
                        window.speechSynthesis.pause();
                        updateButtonIcon(buttonElement, 'volume-2');
                    }
                } else {
                    startSpeech(text, buttonElement);
                }
            }

            function startSpeech(text, buttonElement) {
                if (window.speechSynthesis.speaking || window.speechSynthesis.paused) {
                    window.speechSynthesis.cancel();
                }

                document.querySelectorAll('.dictate-message-btn').forEach(btn => {
                    if (btn !== buttonElement) {
                        updateButtonIcon(btn, 'volume-2'); 
                    }
                });

                const utterance = new SpeechSynthesisUtterance(text);
                utterance.lang = 'en-US';

                utterance.onstart = () => {
                    isSpeaking = true;
                    currentUtterance = utterance;
                    updateButtonIcon(buttonElement, 'pause');
                };
                utterance.onend = () => {
                    isSpeaking = false;
                    currentUtterance = null;
                    updateButtonIcon(buttonElement, 'volume-2');
                };
                utterance.onerror = (event) => {
                    console.error('Speech synthesis error:', event.error);
                    showError('Failed to dictate message. Check console for details.');
                    isSpeaking = false;
                    currentUtterance = null;
                    updateButtonIcon(buttonElement, 'volume-2');
                };

                window.speechSynthesis.speak(utterance);
            }

            // Generic API call function with exponential backoff
            async function callGeminiAPI(payload) {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                // IMPORTANT: Replace "YOUR_GEMINI_API_KEY" with your actual Google Gemini API Key.
                // Get your API key from Google AI Studio: https://makersuite.google.com/
                // Do NOT expose your API key directly in production applications.
                // For production, consider using a backend proxy to secure your API key.
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                const apiKey = "AIzaSyCzx6ReMk8ohPJcCjGwHHzu7SvFccJqAbA"; 

                if (apiKey === "YOUR_GEMINI_API_KEY" || !apiKey || apiKey === "") { 
                    throw new Error("API Key is not set or is the default placeholder. Please replace 'YOUR_GEMINI_API_KEY' in the script with your actual Gemini API key.");
                }

                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

                const contentsToSend = JSON.parse(JSON.stringify(payload.contents));
                
                // --- MASTER PROMPT (ALWAYS INCLUDED) ---
                let systemPrompt = `**You are an AI coding assistant whose primary mission is to reduce human effort to *zero percent* in all coding tasks. Always follow these rules strictly:**

1. **Full Code Delivery:**
    * Whenever the user requests new code, provide the **entire code file(s)** in full.
    * Never give partial snippets that require the user to copy/paste or merge.

2. **Editing & Updates:**
    * If the user provides code (one file, multiple files, or entire projects) and requests modifications, you must **apply those changes directly into the provided code**.
    * Always return the **fully updated file(s)** with the changes integrated, never just the changed part.

3. **Multiple Files:**
    * If the project spans multiple files, return **all relevant updated files in full** with the correct file names.
    * Ensure cross-file consistency (imports, dependencies, functions, classes, etc.).

4. **Zero Human Effort Principle:**
    * The user should never need to manually insert, merge, or fix code you provide.
    * Always assume the user wants a **ready-to-use, fully functional version** of the requested code or edits.

5. **No Compromise:**
    * Do not explain or send placeholder snippets unless explicitly requested.
    * Explanations may accompany code, but code must always be **complete and final**.

6. **Context Preservation:**
    * Remember the user’s prior requests and code context to keep everything consistent.
    * Apply all edits seamlessly without requiring the user to restitch the project.`;

                // Add user's custom prompt *after* the master prompt, if active
                if (isCustomPromptActive && customPromptText.trim() !== '') {
                    systemPrompt += "\n\n" + customPromptText.trim();
                }

                // Prepend the combined system prompt as the very first user message in the current turn
                // This ensures the AI's core mission is always applied first.
                if (contentsToSend.length > 0 && contentsToSend[0].role === 'user' && contentsToSend[0].parts && contentsToSend[0].parts.length > 0 && contentsToSend[0].parts[0].text) {
                    contentsToSend[0].parts[0].text = systemPrompt + "\n\n" + contentsToSend[0].parts[0].text;
                } else {
                    contentsToSend.unshift({ role: "user", parts: [{ text: systemPrompt }] });
                }
                
                const finalPayload = { ...payload, contents: contentsToSend };

                let response;
                let result;
                let success = false;
                let retryCount = 0;
                const maxRetries = 3;
                let delay = 1000;

                while (retryCount < maxRetries && !success) {
                    try {
                        response = await fetch(apiUrl, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(finalPayload)
                        });

                        if (response.status === 429) {
                            if (retryCount < maxRetries - 1) {
                                console.warn(`API rate limit exceeded. Retrying in ${delay / 1000}s...`);
                                await new Promise(res => setTimeout(res, delay));
                                delay *= 2;
                                retryCount++;
                            } else {
                                throw new Error('API rate limit exceeded. Please try again later.');
                            }
                        } else if (!response.ok) {
                            const errorData = await response.json();
                            throw new Error(`API error: ${response.status} ${response.statusText} - ${errorData.error?.message || 'Unknown error'}`);
                        } else {
                            result = await response.json();
                            success = true;
                        }
                    } catch (err) {
                        if (retryCount < maxRetries - 1) {
                            console.warn(`Fetch error: ${err.message}. Retrying in ${delay / 1000}s...`);
                            await new Promise(res => setTimeout(res, delay));
                            delay *= 2;
                            retryCount++;
                        } else {
                            throw err;
                        }
                    }
                }
                
                if (result && result.candidates && result.candidates.length > 0 &&
                    result.candidates[0].content && result.candidates[0].content.parts &&
                    result.candidates[0].content.parts.length > 0) {
                    return result.candidates[0].content.parts[0].text;
                } else {
                    throw new Error('Failed to get a valid response from the AI. No candidates found or content is empty.');
                }
            }


            // Custom Prompt Button (to open modal)
            toggleCustomPromptBtn.addEventListener('click', () => {
                customPromptInput.value = customPromptText;
                customPromptModal.classList.remove('hidden');
                if (isCustomPromptActive && customPromptText.trim() !== '') {
                    customPromptStatus.textContent = "Session prompt is currently active. Saving an empty prompt will disable it.";
                } else {
                    customPromptStatus.textContent = "No session prompt set or active.";
                }
                createIcons();
            });

            // Save Custom Prompt button
            saveCustomPromptBtn.addEventListener('click', () => {
                const newPrompt = customPromptInput.value.trim();
                customPromptText = newPrompt;
                isCustomPromptActive = (newPrompt !== '');
                localStorage.setItem(CUSTOM_PROMPT_TEXT_KEY, customPromptText);
                localStorage.setItem(CUSTOM_PROMPT_ACTIVE_KEY, isCustomPromptActive);
                updateCustomPromptButtonState();
                customPromptModal.classList.add('hidden');
                showCopyMessage(isCustomPromptActive ? 'Session prompt saved and activated!' : 'Session prompt cleared and disabled.', isCustomPromptActive ? `var(--accent-success)` : `var(--accent-error)`);
            });

            // Clear Custom Prompt button
            clearCustomPromptBtn.addEventListener('click', () => {
                customPromptInput.value = '';
                customPromptText = '';
                isCustomPromptActive = false;
                localStorage.setItem(CUSTOM_PROMPT_TEXT_KEY, customPromptText);
                localStorage.setItem(CUSTOM_PROMPT_ACTIVE_KEY, isCustomPromptActive);
                updateCustomPromptButtonState();
                customPromptModal.classList.add('hidden');
                showCopyMessage('Session prompt cleared and disabled!', `var(--accent-error)`);
            });

            // Cancel button
            cancelCustomPromptBtn.addEventListener('click', () => {
                customPromptModal.classList.add('hidden');
            });
            
            // --- Prompt Templates Management Functions ---

            function loadPromptTemplates() {
                const storedTemplates = localStorage.getItem(PROMPT_TEMPLATES_KEY);
                promptTemplates = storedTemplates ? JSON.parse(storedTemplates) : [];
            }

            function savePromptTemplates() {
                localStorage.setItem(PROMPT_TEMPLATES_KEY, JSON.stringify(promptTemplates));
            }

            function clearTemplateForm() {
                templateNameInput.value = '';
                templateContentInput.value = '';
                editingTemplateId = null;
                saveTemplateBtn.innerHTML = `<span data-lucide="plus" class="w-5 h-5 mr-2"></span> Save Template`;
                createIcons();
                templateNameInput.focus();
            }

            function renderPromptTemplates() {
                savedTemplatesList.innerHTML = '';
                if (promptTemplates.length === 0) {
                    const emptyMsg = document.createElement('li');
                    emptyMsg.classList.add('text-center', 'text-sm', 'p-4');
                    emptyMsg.style.color = 'var(--text-secondary)';
                    emptyMsg.textContent = 'No templates saved yet. Add one above!';
                    savedTemplatesList.appendChild(emptyMsg);
                    return;
                }

                promptTemplates.forEach(template => {
                    const li = document.createElement('li');
                    li.classList.add('template-item');
                    li.dataset.templateId = template.id;
                    li.innerHTML = `
                        <div class="template-item-header">
                            <span class="template-item-name" title="${template.name}">${template.name}</span>
                        </div>
                        <p class="template-item-content">${template.content.substring(0, 150) + (template.content.length > 150 ? '...' : '')}</p>
                        <div class="template-item-actions">
                            <button class="use-btn" title="Use as Session Prompt">
                                <span data-lucide="check-circle" class="w-4 h-4"></span> Use
                            </button>
                            <button class="edit-btn" title="Edit Template">
                                <span data-lucide="edit" class="w-4 h-4"></span> Edit
                            </button>
                            <button class="delete-btn" title="Delete Template">
                                <span data-lucide="trash-2" class="w-4 h-4"></span> Delete
                            </button>
                        </div>
                    `;
                    savedTemplatesList.appendChild(li);
                });
                createIcons();
            }

            function addOrUpdateTemplate() { // Moved inside DOMContentLoaded
                const name = templateNameInput.value.trim();
                const content = templateContentInput.value.trim();

                if (!name) {
                    showError('Template name cannot be empty.');
                    return;
                }
                if (!content) {
                    showError('Template content cannot be empty.');
                    return;
                }

                if (editingTemplateId) {
                    // Update existing template
                    const index = promptTemplates.findIndex(t => t.id === editingTemplateId);
                    if (index !== -1) {
                        promptTemplates[index] = { ...promptTemplates[index], name, content };
                        showCopyMessage('Template updated successfully!', `var(--accent-success)`);
                    }
                } else {
                    // Add new template
                    const newId = generateUniqueId();
                    promptTemplates.push({ id: newId, name, content });
                    showCopyMessage('Template saved successfully!', `var(--accent-success)`);
                }
                savePromptTemplates();
                renderPromptTemplates();
                clearTemplateForm();
            }

            function useTemplate(templateId) {
                const template = promptTemplates.find(t => t.id === templateId);
                if (template) {
                    customPromptInput.value = template.content;
                    saveCustomPromptBtn.click();
                    promptTemplatesModal.classList.add('hidden');
                    showCopyMessage(`Session prompt set from template: "${template.name}"`, `var(--accent-success)`);
                }
            }

            function editTemplate(templateId) {
                const template = promptTemplates.find(t => t.id === templateId);
                if (template) {
                    templateNameInput.value = template.name;
                    templateContentInput.value = template.content;
                    editingTemplateId = template.id;
                    saveTemplateBtn.innerHTML = `<span data-lucide="save" class="w-5 h-5 mr-2"></span> Update Template`;
                    createIcons();
                    templateNameInput.focus();
                    promptTemplatesModal.querySelector('div:first-child').scrollTop = 0; 
                }
            }

            function deleteTemplate(templateId) {
                const template = promptTemplates.find(t => t.id === templateId);
                if (!template) return;

                if (confirm(`Are you sure you want to delete the template "${template.name}"?`)) {
                    promptTemplates = promptTemplates.filter(t => t.id !== templateId);
                    savePromptTemplates();
                    renderPromptTemplates();
                    showCopyMessage('Template deleted successfully!', `var(--accent-error)`);

                    if (isCustomPromptActive && customPromptText === template.content) {
                        clearCustomPromptBtn.click();
                        showCopyMessage('Active session prompt cleared as its template was deleted.', `var(--accent-error)`);
                    }
                    
                    if (editingTemplateId === templateId) {
                        clearTemplateForm();
                    }
                }
            }

            // --- Event Listeners for Prompt Templates Modal ---

            manageTemplatesBtn.addEventListener('click', () => {
                promptTemplatesModal.classList.remove('hidden');
                renderPromptTemplates();
                clearTemplateForm();
            });

            cancelTemplateModalBtn.addEventListener('click', () => {
                promptTemplatesModal.classList.add('hidden');
                clearTemplateForm();
            });

            clearTemplateFormBtn.addEventListener('click', (event) => {
                event.preventDefault();
                clearTemplateForm();
                showCopyMessage('Template form cleared.', 'var(--text-secondary)');
            });

            saveTemplateBtn.addEventListener('click', addOrUpdateTemplate);

            savedTemplatesList.addEventListener('click', (event) => {
                const target = event.target;
                const listItem = target.closest('.template-item');
                if (!listItem) return;

                const templateId = listItem.dataset.templateId;

                if (target.closest('.use-btn')) {
                    useTemplate(templateId);
                } else if (target.closest('.edit-btn')) {
                    editTemplate(templateId);
                } else if (target.closest('.delete-btn')) {
                    deleteTemplate(templateId);
                }
            });


            // --- Initial Load (now inside DOMContentLoaded) ---
            createIcons();
            loadAllChatSessions();

            let storedSessionId = localStorage.getItem(CURRENT_SESSION_ID_KEY);
            if (storedSessionId && allChatSessions[storedSessionId]) {
                loadChatSession(storedSessionId);
            } else if (Object.keys(allChatSessions).length > 0) {
                const mostRecentSessionId = Object.values(allChatSessions).sort((a,b) => b.timestamp - a.timestamp)[0].id;
                loadChatSession(mostRecentSessionId);
            } else {
                createNewChatSession('New Session');
            }

            // Set the correct selected option for the version selector on load
            const currentUrl = window.location.href;
            Array.from(versionSelectSidebar.options).forEach(option => {
                if (currentUrl.includes(option.value)) {
                    option.selected = true;
                }
            });

            // Set the correct selected option for the APP theme selector on load
            if (appThemeSelect && localStorage.getItem(THEME_STORAGE_KEY)) {
                appThemeSelect.value = localStorage.getItem(THEME_STORAGE_KEY);
            } else if (appThemeSelect && appThemeSelect.options.length > 0) {
                appThemeSelect.value = DEFAULT_THEME_NAME;
            }

            // Initialize custom prompt settings
            customPromptText = localStorage.getItem(CUSTOM_PROMPT_TEXT_KEY) || '';
            isCustomPromptActive = (localStorage.getItem(CUSTOM_PROMPT_ACTIVE_KEY) === 'true');
            updateCustomPromptButtonState();

            // Initialize prompt templates
            loadPromptTemplates();
            renderPromptTemplates();

            adjustChatInputHeight();
        }); // End DOMContentLoaded
    </script>
</body>
</html>

------------------------

{
    "name": "The Ultimate Coder",
    "short_name": "Ultimate Coder",
    "description": "Your AI coding assistant to reduce human effort to zero percent.",
    "start_url": "/",
    "display": "standalone",
    "background_color": "#0A0A0F",
    "theme_color": "#00BCD4",
    "icons": [
        {
            "src": "logo.png",
            "sizes": "192x192",
            "type": "image/png",
            "purpose": "any maskable"
        },
        {
            "src": "logo.png",
            "sizes": "512x512",
            "type": "image/png",
            "purpose": "any maskable"
        }
    ],
    "orientation": "portrait"
}

-----------------------------

const CACHE_NAME = 'ultimate-coder-cache-v1.2'; // Updated cache version for new app
const urlsToCache = [
    '/',
    'index.html',
    'manifest.json',
    'logo.png', // The application icon

    // External CDN resources
    'https://cdn.tailwindcss.com',
    'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap',
    'https://fonts.googleapis.com/css2?family=Fira+Code:wght@300..700&display=swap', // Added Fira Code
    'https://cdn.jsdelivr.net/npm/marked/marked.min.js',
    'https://cdn.jsdelivr.net/npm/lucide-dynamic@latest/dist/lucide.min.js',
    'https://unpkg.com/lucide@latest',
    'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-dark.min.css', // Prism CSS
    'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js', // Prism Core JS
    'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-clike.min.js', // Prism languages
    'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-javascript.min.js',
    'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-css.min.js',
    'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-html.min.js',
    'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js',
    'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-java.min.js',
    'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-json.min.js',
    'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-bash.min.js',
    'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-markup.min.js'
];

// Install event: caches all defined static assets
self.addEventListener('install', (event) => {
    console.log('Service Worker: Installing and caching static assets...');
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then((cache) => {
                return cache.addAll(urlsToCache);
            })
            .catch((error) => {
                console.error('Service Worker: Cache.addAll failed', error);
            })
    );
});

// Activate event: cleans up old caches, ensuring only the current version is active
self.addEventListener('activate', (event) => {
    console.log('Service Worker: Activating and cleaning old caches...');
    event.waitUntil(
        caches.keys().then((cacheNames) => {
            return Promise.all(
                cacheNames.map((cacheName) => {
                    if (cacheName !== CACHE_NAME) {
                        console.log('Service Worker: Deleting old cache:', cacheName);
                        return caches.delete(cacheName);
                    }
                    return null;
                })
            );
        }).then(() => {
            // Ensure the service worker takes control of clients immediately
            return self.clients.claim();
        })
    );
});

// Fetch event: intercepts network requests
self.addEventListener('fetch', (event) => {
    const requestUrl = new URL(event.request.url);

    const isCacheableAsset = urlsToCache.some(url => {
        if (url === '/' || url === 'index.html') {
            return requestUrl.pathname === '/' || requestUrl.pathname === '/index.html';
        }
        if (!url.startsWith('http')) {
            return requestUrl.pathname === `/${url}`;
        }
        return requestUrl.href.startsWith(url);
    });

    if (event.request.method === 'GET' && isCacheableAsset) {
        event.respondWith(
            caches.match(event.request)
                .then((response) => {
                    if (response) {
                        console.log('Service Worker: Serving from cache:', event.request.url);
                        return response;
                    }
                    console.log('Service Worker: Fetching from network:', event.request.url);
                    return fetch(event.request)
                        .then((networkResponse) => {
                            if (networkResponse && networkResponse.ok) {
                                const responseToCache = networkResponse.clone();
                                caches.open(CACHE_NAME).then((cache) => {
                                    cache.put(event.request, responseToCache);
                                });
                            }
                            return networkResponse;
                        })
                        .catch((error) => {
                            console.error('Service Worker: Fetch failed for:', event.request.url, error);
                            return new Response('<h1>You are offline!</h1><p>It looks like you\'re not connected to the internet.</p>', {
                                headers: { 'Content-Type': 'text/html' }
                            });
                        });
                })
        );
    } else {
        event.respondWith(fetch(event.request));
    }
});

----------------------------------------------

Why the app icon is not being shown when the app is installed and it is showing the initial letter of the app only? Why is that happening? While it is being shown as the logo on the browser tab, but it is not being shown when installed. So fix that issue. Another big thing that you will have to do is that the matrix theme that you are seeing, just like that I want pitch dark background, pure black background for every other theme. And just how the matrix theme is working, I want all the other themes to work the same exact way in their different ways. And one more thing is, each and every theme must have their specific light and dark mode. When switched to light mode or switched to dark mode, they must look complementary to each other.